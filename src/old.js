// Generated by CoffeeScript 1.12.7
(function() {
  var Button, Card, CardList, ClusterView, ExplorationSlider, Workplace, addButton, cardList, clusterButton, clusterMaker, leftmost, tasksQueue,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  clusterMaker = require("clusters");

  tasksQueue = [];

  CardList = (function() {
    function CardList() {
      this.cards = [];
    }

    CardList.prototype.add = function(task) {
      var card;
      card = new Card(task, this);
      this.cards.push(card);
      card.onDoubleTap((function(_this) {
        return function() {
          return _this.remove(card);
        };
      })(this));
      return card;
    };

    CardList.prototype.remove = function(card) {
      var pos;
      pos = this.cards.indexOf(card);
      this.cards.splice(pos, 1);
      return card.destroy();
    };

    CardList.prototype.cardAt = function(x, y) {
      var card, i, len, ref;
      ref = this.cards;
      for (i = 0, len = ref.length; i < len; i++) {
        card = ref[i];
        if (card.x === x && card.y === y) {
          return card;
        }
      }
      return null;
    };

    CardList.prototype.cluster = function() {
      var bigCard, c, cardsInside, cluster, clusters, i, j, len, len1, pair, points, ref, results, tasks;
      points = this.cards.map(function(card) {
        return [card.x, card.y];
      });
      clusterMaker.data(points);
      clusters = clusterMaker.clusters();
      console.log("clusters", clusters);
      results = [];
      for (i = 0, len = clusters.length; i < len; i++) {
        cluster = clusters[i];
        cardsInside = [];
        ref = cluster.points;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          pair = ref[j];
          c = this.cardAt(pair[0], pair[1]);
          if (!_.isNil(c)) {
            cardsInside.push(c);
          }
        }
        tasks = cardsInside.map(function(card) {
          return card.task;
        });
        bigCard = this.add(tasks.join("; "));
        bigCard.x = cluster.centroid[0];
        bigCard.y = cluster.centroid[1];
        results.push(cardsInside.forEach((function(_this) {
          return function(card) {
            return _this.remove(card);
          };
        })(this)));
      }
      return results;
    };

    return CardList;

  })();

  Workplace = (function(superClass) {
    extend(Workplace, superClass);

    function Workplace() {
      Workplace.__super__.constructor.call(this, {
        width: Screen.width / 2,
        height: Screen.height / 2,
        x: Align.center,
        y: Align.center,
        backgroundColor: "#F9F9F9"
      });
      this.active = false;
      this.onLongPress(function() {
        if (this.active) {
          return this.deactivate();
        } else {
          return this.activate();
        }
      });
    }

    Workplace.prototype.activate = function() {
      this.animate({
        backgroundColor: "#AAA"
      });
      return this.active = true;
    };

    Workplace.prototype.deactivate = function() {
      this.active = false;
      return this.animate({
        backgroundColor: "#F9F9F9"
      });
    };

    return Workplace;

  })(Layer);

  Button = (function(superClass) {
    extend(Button, superClass);

    function Button(icon, button) {
      var BUTTON_SIZE, ICON_SIZE, PADDING;
      BUTTON_SIZE = 75;
      ICON_SIZE = 30;
      PADDING = 15;
      Button.__super__.constructor.call(this, {
        width: BUTTON_SIZE,
        height: BUTTON_SIZE,
        x: _.isNil(button) ? Screen.width - BUTTON_SIZE - PADDING : button.x - BUTTON_SIZE - PADDING,
        y: PADDING,
        borderRadius: 15,
        backgroundColor: "#EEE"
      });
      this.iconLayer = new Layer({
        parent: this,
        width: ICON_SIZE,
        height: ICON_SIZE,
        x: Align.center,
        y: Align.center,
        image: "images/icons/" + icon + ".svg"
      });
    }

    return Button;

  })(Layer);

  addButton = new Button("plus");

  clusterButton = new Button("box", addButton);

  cardList = new CardList();

  addButton.onTap(function() {
    var task;
    task = _.isEmpty(tasksQueue) ? prompt("What's the task?") : tasksQueue.pop();
    if (task !== null) {
      return cardList.add(task);
    }
  });

  clusterButton.onTap(function() {
    return cardList.cluster();
  });

  ExplorationSlider = (function(superClass) {
    extend(ExplorationSlider, superClass);

    function ExplorationSlider() {
      ExplorationSlider.__super__.constructor.call(this, {
        x: Align.center,
        y: 50,
        min: 0.0,
        max: 1.0
      });
      this.knob.draggable.momentum = false;
      this.knob.onDragEnd((function(_this) {
        return function() {
          return print(_this.value);
        };
      })(this));
    }

    return ExplorationSlider;

  })(SliderComponent);

  leftmost = function(layers) {
    return _.head(_.sortBy(layers, function(l) {
      return l.x;
    }));
  };

  ClusterView = (function(superClass) {
    extend(ClusterView, superClass);

    function ClusterView(cluster1) {
      var height, max_x, max_y, min_x, min_y, width, x, y;
      this.cluster = cluster1;
      min_x = _.head(_.sortBy(this.cluster.points, function(point) {
        return point[0];
      }))[0];
      max_x = _.head(_.reverse(_.sortBy(this.cluster.points, function(point) {
        return point[0];
      })))[0];
      min_y = _.head(_.sortBy(this.cluster.points, function(point) {
        return point[1];
      }))[1];
      max_y = _.head(_.reverse(_.sortBy(this.cluster.points, function(point) {
        return point[1];
      })))[1];
      height = max_y - min_y;
      width = max_x - min_x;
      x = this.cluster.centroid[0] - (width / 2);
      y = this.cluster.centroy[0] - (height / 2);
      ClusterView.__super__.constructor.call(this, {
        x: x,
        y: y,
        width: width,
        height: height,
        backgroundColor: "#EEDDDD"
      });
      this.sendToBack();
    }

    return ClusterView;

  })(Layer);

  Card = (function(superClass) {
    extend(Card, superClass);

    Card.prototype.instersectionArea = function(layer) {};

    Card.prototype.isInside = function(layer) {
      return (this.x > layer.x) && (this.x < layer.x + layer.width) && (this.y > layer.y) && (this.y < layer.y + layer.height);
    };

    function Card(task1, list) {
      var PADDING, _damping, grow, key, newHeight, newWidth, pos_str, stay, text;
      this.task = task1;
      this.list = list;
      key = this.task.toLowerCase().split(" ").join("_");
      pos_str = localStorage.getItem("cardpos:" + key);
      if (pos_str !== null) {
        this.xInit = parseInt(pos_str.split(",")[0]);
        this.yInit = parseInt(pos_str.split(",")[1]);
      } else {
        this.xInit = Canvas.width / 2;
        this.yInit = Canvas.height / 2;
      }
      Card.__super__.constructor.call(this, {
        x: this.xInit,
        y: this.yInit,
        width: 100,
        height: 100,
        borderRadius: 8,
        backgroundColor: "#FFFFCC",
        shadowX: 0,
        shadowY: 3,
        shadowBlur: 6,
        shadowSpread: 0,
        shadowColor: "rgba(0,0,0,0.25)"
      });
      text = new TextLayer({
        parent: this,
        text: this.task,
        fontSize: 12,
        fontFamily: "Inconsolata-g",
        color: "black"
      });
      PADDING = 15;
      this.width = text.width + (2 * PADDING);
      this.height = text.height + (2 * PADDING);
      text.x = Align.center;
      text.y = Align.center;
      newWidth = this.width * 1.25;
      newHeight = this.height * 1.25;
      _damping = 0.19;
      grow = new Animation(this, {
        width: newWidth,
        height: newHeight,
        x: this.xInit,
        y: this.yInit,
        options: {
          curve: Spring({
            damping: _damping
          }),
          time: 0.5
        }
      });
      grow.start();
      stay = new Animation(text, {
        x: (newWidth / 2) - (text.width / 2),
        y: (newHeight / 2) - (text.height / 2),
        options: {
          curve: Spring({
            damping: _damping
          }),
          time: 0.5
        }
      });
      stay.start();
      this.draggable.enabled = true;
      this.draggable.momentum = false;
      this.onDragEnd(function() {
        key = this.task.toLowerCase().split(" ").join("_");
        return localStorage.setItem("cardpos:" + key, this.x + "," + this.y);
      });
      this.onLongPressEnd((function(_this) {
        return function() {
          newWidth = _this.width * 1.25;
          newHeight = _this.height * 1.25;
          _this.animate({
            width: newWidth,
            height: newHeight
          });
          return text.animate({
            x: (newWidth / 2) - (text.width / 2),
            y: (newHeight / 2) - (text.height / 2)
          });
        };
      })(this));
      this.onTap(function() {
        return this.bringToFront();
      });
      this.onPinch(function() {
        return;
        newWidth = this.width * (1 / 1.25);
        newHeight = this.height * (1 / 1.25);
        this.animate({
          width: newWidth,
          height: newHeight
        });
        return text.animate({
          x: (newWidth / 2) - (text.width / 2),
          y: (newHeight / 2) - (text.height / 2)
        });
      });
    }

    return Card;

  })(Layer);

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/gvieira/Dropbox/design/Projects/Hare/hare.io/Framer/Project/src_coffee/old.coffee