// Generated by CoffeeScript 1.12.7
(function() {
  var Parser,
    slice = [].slice;

  Parser = (function() {
    function Parser(string1) {
      this.string = string1;
    }

    Parser.prototype.tokenize = function(string) {
      return string.replace(/\(/g, "( ").replace(/\)/g, " )").split(" ").filter(function(str) {
        return str !== "";
      });
    };

    Parser.prototype.atomize = function(token) {
      if (token === "true") {
        return true;
      }
      if (token === "false") {
        return false;
      }
      if (!_.isNaN(parseInt(token))) {
        return parseInt(token);
      }
      return token;
    };

    Parser.prototype.readFrom = function(tokens) {
      var L, token;
      if (_.isEmpty(tokens)) {
        throw new SyntaxError("unexpected EOF while reading");
      }
      token = tokens.shift();
      if (token === "(") {
        L = [];
        while (tokens[0] !== ")") {
          L.push(this.readFrom(tokens));
        }
        tokens.shift();
        return L;
      } else if (token === ")") {
        throw new SyntaxError("unexpected )");
      } else {
        return this.atomize(token);
      }
    };

    Parser.prototype.parse = function() {
      return this.readFrom(this.tokenize(this.string));
    };

    return Parser;

  })();

  module.exports = {
    Parser: Parser,
    parse: function(str) {
      var parser;
      parser = new Parser(str);
      return parser.parse();
    },
    test: function() {
      var test;
      test = function() {
        var actual, args, expected, fn, i;
        fn = arguments[0], args = 3 <= arguments.length ? slice.call(arguments, 1, i = arguments.length - 1) : (i = 1, []), expected = arguments[i++];
        actual = fn.apply(null, args);
        if (_.isEqual(actual, expected)) {
          return console.log("[*] Test OK");
        } else {
          return console.log("[!] Test failed!\n    Expected: `" + expected + "` (" + (typeof expected) + ")\n    Actual: `" + actual + "` (" + (typeof actual) + ")");
        }
      };
      test(this.parse, "hi", "hi");
      test(this.parse, "12", 12);
      test(this.parse, "()", []);
      test(this.parse, "(hi)", ["hi"]);
      test(this.parse, "(hello there)", ["hello", "there"]);
      test(this.parse, "(hello 'there)", ["hello", "'there"]);
      test(this.parse, "(hello (1 2 3))", ["hello", [1, 2, 3]]);
      return test(this.parse, "(hello (my good) old friend ())", ["hello", ["my", "good"], "old", "friend", []]);
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2VyLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJzcmNfY29mZmVlL3BhcnNlci5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQTZEQTtBQUFBLE1BQUEsTUFBQTtJQUFBOztFQUFNO0lBQ1MsZ0JBQUMsT0FBRDtNQUFDLElBQUMsQ0FBQSxTQUFEO0lBQUQ7O3FCQUViLFFBQUEsR0FBVSxTQUFDLE1BQUQ7YUFDUixNQUFNLENBQUMsT0FBUCxDQUFlLEtBQWYsRUFBc0IsSUFBdEIsQ0FBMkIsQ0FBQyxPQUE1QixDQUFvQyxLQUFwQyxFQUEyQyxJQUEzQyxDQUFnRCxDQUFDLEtBQWpELENBQXVELEdBQXZELENBQTJELENBQUMsTUFBNUQsQ0FBbUUsU0FBQyxHQUFEO2VBQVMsR0FBQSxLQUFTO01BQWxCLENBQW5FO0lBRFE7O3FCQUdWLE9BQUEsR0FBUyxTQUFDLEtBQUQ7TUFDUCxJQUFlLEtBQUEsS0FBUyxNQUF4QjtBQUFBLGVBQU8sS0FBUDs7TUFDQSxJQUFnQixLQUFBLEtBQVMsT0FBekI7QUFBQSxlQUFPLE1BQVA7O01BQ0EsSUFBMEIsQ0FBSSxDQUFDLENBQUMsS0FBRixDQUFRLFFBQUEsQ0FBUyxLQUFULENBQVIsQ0FBOUI7QUFBQSxlQUFPLFFBQUEsQ0FBUyxLQUFULEVBQVA7O0FBRUEsYUFBTztJQUxBOztxQkFPVCxRQUFBLEdBQVUsU0FBQyxNQUFEO0FBQ1IsVUFBQTtNQUFBLElBQXlELENBQUMsQ0FBQyxPQUFGLENBQVUsTUFBVixDQUF6RDtBQUFBLGNBQU0sSUFBSSxXQUFKLENBQWdCLDhCQUFoQixFQUFOOztNQUNBLEtBQUEsR0FBUSxNQUFNLENBQUMsS0FBUCxDQUFBO01BQ1IsSUFBRyxLQUFBLEtBQVMsR0FBWjtRQUNFLENBQUEsR0FBSTtBQUNKLGVBQU0sTUFBTyxDQUFBLENBQUEsQ0FBUCxLQUFlLEdBQXJCO1VBQ0UsQ0FBQyxDQUFDLElBQUYsQ0FBTyxJQUFDLENBQUEsUUFBRCxDQUFVLE1BQVYsQ0FBUDtRQURGO1FBRUEsTUFBTSxDQUFDLEtBQVAsQ0FBQTtBQUNBLGVBQU8sRUFMVDtPQUFBLE1BTUssSUFBRyxLQUFBLEtBQVMsR0FBWjtBQUNILGNBQU0sSUFBSSxXQUFKLENBQWdCLGNBQWhCLEVBREg7T0FBQSxNQUFBO0FBR0gsZUFBTyxJQUFDLENBQUEsT0FBRCxDQUFTLEtBQVQsRUFISjs7SUFURzs7cUJBY1YsS0FBQSxHQUFPLFNBQUE7YUFDTCxJQUFDLENBQUEsUUFBRCxDQUFVLElBQUMsQ0FBQSxRQUFELENBQVUsSUFBQyxDQUFBLE1BQVgsQ0FBVjtJQURLOzs7Ozs7RUFHVCxNQUFNLENBQUMsT0FBUCxHQUNFO0lBQUEsTUFBQSxFQUFRLE1BQVI7SUFDQSxLQUFBLEVBQU8sU0FBQyxHQUFEO0FBQ0wsVUFBQTtNQUFBLE1BQUEsR0FBUyxJQUFJLE1BQUosQ0FBVyxHQUFYO2FBQ1QsTUFBTSxDQUFDLEtBQVAsQ0FBQTtJQUZLLENBRFA7SUFJQSxJQUFBLEVBQU0sU0FBQTtBQUNKLFVBQUE7TUFBQSxJQUFBLEdBQU8sU0FBQTtBQUNMLFlBQUE7UUFETSxtQkFBSSxpR0FBUztRQUNuQixNQUFBLEdBQVMsRUFBQSxhQUFHLElBQUg7UUFDVCxJQUFHLENBQUMsQ0FBQyxPQUFGLENBQVUsTUFBVixFQUFrQixRQUFsQixDQUFIO2lCQUNFLE9BQU8sQ0FBQyxHQUFSLENBQVksYUFBWixFQURGO1NBQUEsTUFBQTtpQkFHRSxPQUFPLENBQUMsR0FBUixDQUFZLG1DQUFBLEdBQW9DLFFBQXBDLEdBQTZDLEtBQTdDLEdBQWlELENBQUMsT0FBTyxRQUFSLENBQWpELEdBQWtFLGtCQUFsRSxHQUFvRixNQUFwRixHQUEyRixLQUEzRixHQUErRixDQUFDLE9BQU8sTUFBUixDQUEvRixHQUE4RyxHQUExSCxFQUhGOztNQUZLO01BTVAsSUFBQSxDQUFLLElBQUksQ0FBQyxLQUFWLEVBQWlCLElBQWpCLEVBQXVCLElBQXZCO01BQ0EsSUFBQSxDQUFLLElBQUksQ0FBQyxLQUFWLEVBQWlCLElBQWpCLEVBQXVCLEVBQXZCO01BQ0EsSUFBQSxDQUFLLElBQUksQ0FBQyxLQUFWLEVBQWlCLElBQWpCLEVBQXVCLEVBQXZCO01BQ0EsSUFBQSxDQUFLLElBQUksQ0FBQyxLQUFWLEVBQWlCLE1BQWpCLEVBQXlCLENBQUMsSUFBRCxDQUF6QjtNQUNBLElBQUEsQ0FBSyxJQUFJLENBQUMsS0FBVixFQUFpQixlQUFqQixFQUFrQyxDQUFDLE9BQUQsRUFBVSxPQUFWLENBQWxDO01BQ0EsSUFBQSxDQUFLLElBQUksQ0FBQyxLQUFWLEVBQWlCLGdCQUFqQixFQUFtQyxDQUFDLE9BQUQsRUFBVSxRQUFWLENBQW5DO01BQ0EsSUFBQSxDQUFLLElBQUksQ0FBQyxLQUFWLEVBQWlCLGlCQUFqQixFQUFvQyxDQUFDLE9BQUQsRUFBVSxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxDQUFWLENBQXBDO2FBQ0EsSUFBQSxDQUFLLElBQUksQ0FBQyxLQUFWLEVBQWlCLGlDQUFqQixFQUFvRCxDQUFDLE9BQUQsRUFBVSxDQUFDLElBQUQsRUFBTyxNQUFQLENBQVYsRUFBMEIsS0FBMUIsRUFBaUMsUUFBakMsRUFBMkMsRUFBM0MsQ0FBcEQ7SUFkSSxDQUpOOztBQS9CRiIsInNvdXJjZXNDb250ZW50IjpbIiMgY2xhc3MgRXhwcmVzc2lvblxuIyAgIGNvbnN0cnVjdG9yOiAoQGlkLCBAY29udGV4dCkgLT5cbiMgICAgIEBjb250ZXh0LmV4cHJlc3Npb25fYnlfaWRbQGlkXSA9IHRoaXNcbiNcbiMgY2xhc3MgQXRvbSBleHRlbmRzIEV4cHJlc3Npb25cbiMgICBjb25zdHJ1Y3RvcjogKEBzdHJpbmcsIEBjb250ZXh0KSAtPlxuIyAgICAgQGlkID0gXy51bmlxdWVJZCgnQXRvbV8nKVxuIyAgICAgc3VwZXIgQGlkLCBAY29udGV4dFxuI1xuIyBjbGFzcyBMaXN0IGV4dGVuZHMgRXhwcmVzc2lvblxuIyAgIGNvbnN0cnVjdG9yOiAoQGNvbnRleHQpIC0+XG4jICAgICBAaWQgPSBfLnVuaXF1ZUlkKCdMaXN0XycpXG4jICAgICBzdXBlciBAaWQsIEBjb250ZXh0XG4jXG4jIGNsYXNzIENvbnRleHRcbiMgICBjb25zdHJ1Y3RvcjogKCkgLT5cbiMgICAgIEBleHByZXNzaW9uX2J5X2lkID0gW11cbiMgICAgIEByb290X2lkID0gbnVsbFxuIyAgICAgQGN1cnNvcl9pZCA9IG51bGxcbiMgICAgIEBwYXJlbnRfb2YgPSB7fVxuIyAgICAgQGNoaWxkcmVuX29mID0ge31cbiMgICAgIEBwcmV2aW91c19vZiA9IHt9XG4jICAgICBAbmV4dF9vZiA9IHt9XG4jICAgICBAbGF5ZXJfb2YgPSB7fVxuIyAgIHB1c2g6IChsaXN0LCBleHApIC0+XG4jICAgICBAcGFyZW50X29mW2V4cC5pZF0gPSBsaXN0LmlkXG4jICAgICBAY2hpbGRyZW5fb2ZbbGlzdC5pZF0gPSBbXSBpZiBfLmlzVW5kZWZpbmVkKEBjaGlsZHJlbl9vZltsaXN0LmlkXSlcbiMgICAgIEBjaGlsZHJlbl9vZltsaXN0LmlkXS5wdXNoKGV4cC5pZClcbiMgICAgIGlmIEBjaGlsZHJlbl9vZltsaXN0LmlkXS5sZW5ndGggPiAxXG4jICAgICAgIGJlZm9yZV9leHAgPSBfLmxhc3QoXy5kcm9wUmlnaHQoQGNoaWxkcmVuX29mW2xpc3QuaWRdKSlcbiMgICAgICAgQHByZXZpb3VzX29mW2V4cC5pZF0gPSBiZWZvcmVfZXhwLmlkXG4jICAgICAgIEBuZXh0X29mW2JlZm9yZV9leHAuaWRdID0gZXhwLmlkXG4jXG4jIGNsYXNzIFN0cmluZ1BhcnNlclxuIyAgIGNvbnN0cnVjdG9yOiAoQHN0cmluZykgLT5cbiMgICAgIEBjb250ZXh0ID0gbmV3IENvbnRleHQoKVxuI1xuIyAgIHRva2VuaXplOiAoc3RyaW5nKSAtPlxuIyAgICAgIyBpbnB1dCAtPiAnKGZuIChzKSAoKyBcImhlbGxvIFwiIHMpKSdcbiMgICAgICMgb3V0cHV0IC0+IFsnKCcsICdmbicsICcoJywgJ3MnLCAnKScsICcoJywgJ1wiaGVsbG8nLCAnXCInLCAncycsICcpJ11cbiMgICAgIHN0cmluZy5yZXBsYWNlKC9cXCgvZywgXCIoIFwiKS5yZXBsYWNlKC9cXCkvZywgXCIgKVwiKS5zcGxpdChcIiBcIikuZmlsdGVyIChzdHIpIC0+IHN0ciBpc250IFwiXCJcbiNcbiMgICByZWFkRnJvbTogKHRva2VucywgY29udGV4dCkgLT5cbiMgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihcInVuZXhwZWN0ZWQgRU9GIHdoaWxlIHJlYWRpbmdcIikgaWYgXy5pc0VtcHR5KHRva2VucylcbiMgICAgIHRva2VuID0gdG9rZW5zLnNoaWZ0KClcbiMgICAgIGlmIHRva2VuIGlzIFwiKFwiXG4jICAgICAgIGxpc3QgPSBuZXcgTGlzdChjb250ZXh0KVxuIyAgICAgICB3aGlsZSB0b2tlbnNbMF0gaXNudCBcIilcIlxuIyAgICAgICAgIEBjb250ZXh0LnB1c2gobGlzdCwgQHJlYWRGcm9tKHRva2VucywgY29udGV4dCkpXG4jICAgICAgIHRva2Vucy5zaGlmdCgpXG4jICAgICAgIHJldHVybiBsaXN0XG4jICAgICBlbHNlIGlmIHRva2VuIGlzIFwiKVwiXG4jICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihcInVuZXhwZWN0ZWQgKVwiKVxuIyAgICAgZWxzZVxuIyAgICAgICByZXR1cm4gbmV3IEF0b20odG9rZW4sIGNvbnRleHQpXG4jXG4jICAgcGFyc2U6IC0+XG4jICAgICBleHAgPSBAcmVhZEZyb20oQHRva2VuaXplKEBzdHJpbmcpLCBAY29udGV4dClcbiMgICAgIEBjb250ZXh0LnJvb3RfaWQgPSBleHAuaWRcblxuXG5jbGFzcyBQYXJzZXJcbiAgY29uc3RydWN0b3I6IChAc3RyaW5nKSAtPlxuXG4gIHRva2VuaXplOiAoc3RyaW5nKSAtPlxuICAgIHN0cmluZy5yZXBsYWNlKC9cXCgvZywgXCIoIFwiKS5yZXBsYWNlKC9cXCkvZywgXCIgKVwiKS5zcGxpdChcIiBcIikuZmlsdGVyIChzdHIpIC0+IHN0ciBpc250IFwiXCJcblxuICBhdG9taXplOiAodG9rZW4pIC0+XG4gICAgcmV0dXJuIHRydWUgaWYgdG9rZW4gaXMgXCJ0cnVlXCJcbiAgICByZXR1cm4gZmFsc2UgaWYgdG9rZW4gaXMgXCJmYWxzZVwiXG4gICAgcmV0dXJuIHBhcnNlSW50KHRva2VuKSBpZiBub3QgXy5pc05hTihwYXJzZUludCh0b2tlbikpXG4gICAgIyBUT0RPOiBsaXRlcmFsIHN0cmluZ3NcbiAgICByZXR1cm4gdG9rZW5cblxuICByZWFkRnJvbTogKHRva2VucykgLT5cbiAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJ1bmV4cGVjdGVkIEVPRiB3aGlsZSByZWFkaW5nXCIpIGlmIF8uaXNFbXB0eSh0b2tlbnMpXG4gICAgdG9rZW4gPSB0b2tlbnMuc2hpZnQoKVxuICAgIGlmIHRva2VuIGlzIFwiKFwiXG4gICAgICBMID0gW11cbiAgICAgIHdoaWxlIHRva2Vuc1swXSBpc250IFwiKVwiXG4gICAgICAgIEwucHVzaChAcmVhZEZyb20odG9rZW5zKSlcbiAgICAgIHRva2Vucy5zaGlmdCgpXG4gICAgICByZXR1cm4gTFxuICAgIGVsc2UgaWYgdG9rZW4gaXMgXCIpXCJcbiAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihcInVuZXhwZWN0ZWQgKVwiKVxuICAgIGVsc2VcbiAgICAgIHJldHVybiBAYXRvbWl6ZSh0b2tlbilcblxuICBwYXJzZTogLT5cbiAgICBAcmVhZEZyb20oQHRva2VuaXplKEBzdHJpbmcpKVxuXG5tb2R1bGUuZXhwb3J0cyA9XG4gIFBhcnNlcjogUGFyc2VyXG4gIHBhcnNlOiAoc3RyKSAtPlxuICAgIHBhcnNlciA9IG5ldyBQYXJzZXIoc3RyKVxuICAgIHBhcnNlci5wYXJzZSgpXG4gIHRlc3Q6IC0+XG4gICAgdGVzdCA9IChmbiwgYXJncy4uLiwgZXhwZWN0ZWQpIC0+XG4gICAgICBhY3R1YWwgPSBmbihhcmdzLi4uKVxuICAgICAgaWYgXy5pc0VxdWFsKGFjdHVhbCwgZXhwZWN0ZWQpXG4gICAgICAgIGNvbnNvbGUubG9nIFwiWypdIFRlc3QgT0tcIlxuICAgICAgZWxzZVxuICAgICAgICBjb25zb2xlLmxvZyBcIlshXSBUZXN0IGZhaWxlZCFcXG4gICAgRXhwZWN0ZWQ6IGAje2V4cGVjdGVkfWAgKCN7dHlwZW9mIGV4cGVjdGVkfSlcXG4gICAgQWN0dWFsOiBgI3thY3R1YWx9YCAoI3t0eXBlb2YgYWN0dWFsfSlcIlxuICAgIHRlc3QgdGhpcy5wYXJzZSwgXCJoaVwiLCBcImhpXCJcbiAgICB0ZXN0IHRoaXMucGFyc2UsIFwiMTJcIiwgMTJcbiAgICB0ZXN0IHRoaXMucGFyc2UsIFwiKClcIiwgW11cbiAgICB0ZXN0IHRoaXMucGFyc2UsIFwiKGhpKVwiLCBbXCJoaVwiXVxuICAgIHRlc3QgdGhpcy5wYXJzZSwgXCIoaGVsbG8gdGhlcmUpXCIsIFtcImhlbGxvXCIsIFwidGhlcmVcIl1cbiAgICB0ZXN0IHRoaXMucGFyc2UsIFwiKGhlbGxvICd0aGVyZSlcIiwgW1wiaGVsbG9cIiwgXCIndGhlcmVcIl1cbiAgICB0ZXN0IHRoaXMucGFyc2UsIFwiKGhlbGxvICgxIDIgMykpXCIsIFtcImhlbGxvXCIsIFsxLCAyLCAzXV1cbiAgICB0ZXN0IHRoaXMucGFyc2UsIFwiKGhlbGxvIChteSBnb29kKSBvbGQgZnJpZW5kICgpKVwiLCBbXCJoZWxsb1wiLCBbXCJteVwiLCBcImdvb2RcIl0sIFwib2xkXCIsIFwiZnJpZW5kXCIsIFtdXVxuIl19
//# sourceURL=/Users/gvieira/code/hare/hare_framer/src_coffee/parser.coffee