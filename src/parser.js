// Generated by CoffeeScript 1.12.7
(function() {
  var Parser,
    slice = [].slice;

  Parser = (function() {
    function Parser(string1) {
      this.string = string1;
    }

    Parser.prototype.tokenize = function(string) {
      return string.replace(/\(/g, "( ").replace(/\)/g, " )").split(" ").filter(function(str) {
        return str !== "";
      });
    };

    Parser.prototype.atomize = function(token) {
      // if (token === "true") {
      //   return true;
      // }
      // if (token === "false") {
      //   return false;
      // }
      // if (!_.isNaN(parseInt(token))) {
      //   return parseInt(token);
      // }
      return token;
    };

    Parser.prototype.readFrom = function(tokens) {
      var L, token;
      if (_.isEmpty(tokens)) {
        throw new SyntaxError("unexpected EOF while reading");
      }
      token = tokens.shift();
      if (token === "(") {
        L = [];
        while (tokens[0] !== ")") {
          L.push(this.readFrom(tokens));
        }
        tokens.shift();
        return L;
      } else if (token === ")") {
        throw new SyntaxError("unexpected )");
      } else {
        return this.atomize(token);
      }
    };

    Parser.prototype.parse = function() {
      return this.readFrom(this.tokenize(this.string));
    };

    return Parser;

  })();

  module.exports = {
    Parser: Parser,
    parse: function (str) {
      var parser = new Parser(str);
      return parser.parse();
    },
    test: function() {
      var parse, test;
      parse = function(str) {
        var parser;
        parser = new Parser(str);
        return parser.parse();
      };
      test = function() {
        var actual, args, expected, fn, i;
        fn = arguments[0], args = 3 <= arguments.length ? slice.call(arguments, 1, i = arguments.length - 1) : (i = 1, []), expected = arguments[i++];
        actual = fn.apply(null, args);
        if (_.isEqual(actual, expected)) {
          return console.log("[*] Test OK");
        } else {
          return console.log("[!] Test failed!\n    Expected: `" + expected + "` (" + (typeof expected) + ")\n    Actual: `" + actual + "` (" + (typeof actual) + ")");
        }
      };
      test(parse, "hi", "hi");
      test(parse, "()", []);
      test(parse, "(hi)", ["hi"]);
      test(parse, "(hello there)", ["hello", "there"]);
      test(parse, "(hello 'there)", ["hello", "'there"]);
      test(parse, "(hello (1 2 3))", ["hello", ["1", "2", "3"]]);
      return test(parse, "(hello (my good) old friend ())", ["hello", ["my", "good"], "old", "friend", []]);
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2VyLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJzcmNfY29mZmVlL3BhcnNlci5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQUEsTUFBQSxNQUFBO0lBQUE7O0VBQU07SUFDUyxnQkFBQyxPQUFEO01BQUMsSUFBQyxDQUFBLFNBQUQ7SUFBRDs7cUJBRWIsUUFBQSxHQUFVLFNBQUMsTUFBRDthQUNSLE1BQU0sQ0FBQyxPQUFQLENBQWUsS0FBZixFQUFzQixJQUF0QixDQUEyQixDQUFDLE9BQTVCLENBQW9DLEtBQXBDLEVBQTJDLElBQTNDLENBQWdELENBQUMsS0FBakQsQ0FBdUQsR0FBdkQsQ0FBMkQsQ0FBQyxNQUE1RCxDQUFtRSxTQUFDLEdBQUQ7ZUFBUyxHQUFBLEtBQVM7TUFBbEIsQ0FBbkU7SUFEUTs7cUJBR1YsT0FBQSxHQUFTLFNBQUMsS0FBRDtNQUNQLElBQWUsS0FBQSxLQUFTLE1BQXhCO0FBQUEsZUFBTyxLQUFQOztNQUNBLElBQWdCLEtBQUEsS0FBUyxPQUF6QjtBQUFBLGVBQU8sTUFBUDs7TUFDQSxJQUEwQixDQUFJLENBQUMsQ0FBQyxLQUFGLENBQVEsUUFBQSxDQUFTLEtBQVQsQ0FBUixDQUE5QjtBQUFBLGVBQU8sUUFBQSxDQUFTLEtBQVQsRUFBUDs7QUFFQSxhQUFPO0lBTEE7O3FCQU9ULFFBQUEsR0FBVSxTQUFDLE1BQUQ7QUFDUixVQUFBO01BQUEsSUFBeUQsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxNQUFWLENBQXpEO0FBQUEsY0FBTSxJQUFJLFdBQUosQ0FBZ0IsOEJBQWhCLEVBQU47O01BQ0EsS0FBQSxHQUFRLE1BQU0sQ0FBQyxLQUFQLENBQUE7TUFDUixJQUFHLEtBQUEsS0FBUyxHQUFaO1FBQ0UsQ0FBQSxHQUFJO0FBQ0osZUFBTSxNQUFPLENBQUEsQ0FBQSxDQUFQLEtBQWUsR0FBckI7VUFDRSxDQUFDLENBQUMsSUFBRixDQUFPLElBQUMsQ0FBQSxRQUFELENBQVUsTUFBVixDQUFQO1FBREY7UUFFQSxNQUFNLENBQUMsS0FBUCxDQUFBO0FBQ0EsZUFBTyxFQUxUO09BQUEsTUFNSyxJQUFHLEtBQUEsS0FBUyxHQUFaO0FBQ0gsY0FBTSxJQUFJLFdBQUosQ0FBZ0IsY0FBaEIsRUFESDtPQUFBLE1BQUE7QUFHSCxlQUFPLElBQUMsQ0FBQSxPQUFELENBQVMsS0FBVCxFQUhKOztJQVRHOztxQkFjVixLQUFBLEdBQU8sU0FBQTthQUNMLElBQUMsQ0FBQSxRQUFELENBQVUsSUFBQyxDQUFBLFFBQUQsQ0FBVSxJQUFDLENBQUEsTUFBWCxDQUFWO0lBREs7Ozs7OztFQUdULE1BQU0sQ0FBQyxPQUFQLEdBQ0U7SUFBQSxNQUFBLEVBQVEsTUFBUjtJQUNBLElBQUEsRUFBTSxTQUFBO0FBQ0osVUFBQTtNQUFBLEtBQUEsR0FBUSxTQUFDLEdBQUQ7QUFDTixZQUFBO1FBQUEsTUFBQSxHQUFTLElBQUksTUFBSixDQUFXLEdBQVg7ZUFDVCxNQUFNLENBQUMsS0FBUCxDQUFBO01BRk07TUFHUixJQUFBLEdBQU8sU0FBQTtBQUNMLFlBQUE7UUFETSxtQkFBSSxpR0FBUztRQUNuQixNQUFBLEdBQVMsRUFBQSxhQUFHLElBQUg7UUFDVCxJQUFHLENBQUMsQ0FBQyxPQUFGLENBQVUsTUFBVixFQUFrQixRQUFsQixDQUFIO2lCQUNFLE9BQU8sQ0FBQyxHQUFSLENBQVksYUFBWixFQURGO1NBQUEsTUFBQTtpQkFHRSxPQUFPLENBQUMsR0FBUixDQUFZLG1DQUFBLEdBQW9DLFFBQXBDLEdBQTZDLEtBQTdDLEdBQWlELENBQUMsT0FBTyxRQUFSLENBQWpELEdBQWtFLGtCQUFsRSxHQUFvRixNQUFwRixHQUEyRixLQUEzRixHQUErRixDQUFDLE9BQU8sTUFBUixDQUEvRixHQUE4RyxHQUExSCxFQUhGOztNQUZLO01BTVAsSUFBQSxDQUFLLEtBQUwsRUFBWSxJQUFaLEVBQWtCLElBQWxCO01BQ0EsSUFBQSxDQUFLLEtBQUwsRUFBWSxJQUFaLEVBQWtCLEVBQWxCO01BQ0EsSUFBQSxDQUFLLEtBQUwsRUFBWSxNQUFaLEVBQW9CLENBQUMsSUFBRCxDQUFwQjtNQUNBLElBQUEsQ0FBSyxLQUFMLEVBQVksZUFBWixFQUE2QixDQUFDLE9BQUQsRUFBVSxPQUFWLENBQTdCO01BQ0EsSUFBQSxDQUFLLEtBQUwsRUFBWSxnQkFBWixFQUE4QixDQUFDLE9BQUQsRUFBVSxRQUFWLENBQTlCO01BQ0EsSUFBQSxDQUFLLEtBQUwsRUFBWSxpQkFBWixFQUErQixDQUFDLE9BQUQsRUFBVSxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxDQUFWLENBQS9CO2FBQ0EsSUFBQSxDQUFLLEtBQUwsRUFBWSxpQ0FBWixFQUErQyxDQUFDLE9BQUQsRUFBVSxDQUFDLElBQUQsRUFBTyxNQUFQLENBQVYsRUFBMEIsS0FBMUIsRUFBaUMsUUFBakMsRUFBMkMsRUFBM0MsQ0FBL0M7SUFoQkksQ0FETjs7QUEvQkYiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBQYXJzZXJcbiAgY29uc3RydWN0b3I6IChAc3RyaW5nKSAtPlxuXG4gIHRva2VuaXplOiAoc3RyaW5nKSAtPlxuICAgIHN0cmluZy5yZXBsYWNlKC9cXCgvZywgXCIoIFwiKS5yZXBsYWNlKC9cXCkvZywgXCIgKVwiKS5zcGxpdChcIiBcIikuZmlsdGVyIChzdHIpIC0+IHN0ciBpc250IFwiXCJcblxuICBhdG9taXplOiAodG9rZW4pIC0+XG4gICAgcmV0dXJuIHRydWUgaWYgdG9rZW4gaXMgXCJ0cnVlXCJcbiAgICByZXR1cm4gZmFsc2UgaWYgdG9rZW4gaXMgXCJmYWxzZVwiXG4gICAgcmV0dXJuIHBhcnNlSW50KHRva2VuKSBpZiBub3QgXy5pc05hTihwYXJzZUludCh0b2tlbikpXG4gICAgIyBUT0RPOiBsaXRlcmFsIHN0cmluZ3NcbiAgICByZXR1cm4gdG9rZW5cblxuICByZWFkRnJvbTogKHRva2VucykgLT5cbiAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJ1bmV4cGVjdGVkIEVPRiB3aGlsZSByZWFkaW5nXCIpIGlmIF8uaXNFbXB0eSh0b2tlbnMpXG4gICAgdG9rZW4gPSB0b2tlbnMuc2hpZnQoKVxuICAgIGlmIHRva2VuIGlzIFwiKFwiXG4gICAgICBMID0gW11cbiAgICAgIHdoaWxlIHRva2Vuc1swXSBpc250IFwiKVwiXG4gICAgICAgIEwucHVzaChAcmVhZEZyb20odG9rZW5zKSlcbiAgICAgIHRva2Vucy5zaGlmdCgpXG4gICAgICByZXR1cm4gTFxuICAgIGVsc2UgaWYgdG9rZW4gaXMgXCIpXCJcbiAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihcInVuZXhwZWN0ZWQgKVwiKVxuICAgIGVsc2VcbiAgICAgIHJldHVybiBAYXRvbWl6ZSh0b2tlbilcblxuICBwYXJzZTogLT5cbiAgICBAcmVhZEZyb20oQHRva2VuaXplKEBzdHJpbmcpKVxuXG5tb2R1bGUuZXhwb3J0cyA9XG4gIFBhcnNlcjogUGFyc2VyXG4gIHRlc3Q6IC0+XG4gICAgcGFyc2UgPSAoc3RyKSAtPlxuICAgICAgcGFyc2VyID0gbmV3IFBhcnNlcihzdHIpXG4gICAgICBwYXJzZXIucGFyc2UoKVxuICAgIHRlc3QgPSAoZm4sIGFyZ3MuLi4sIGV4cGVjdGVkKSAtPlxuICAgICAgYWN0dWFsID0gZm4oYXJncy4uLilcbiAgICAgIGlmIF8uaXNFcXVhbChhY3R1YWwsIGV4cGVjdGVkKVxuICAgICAgICBjb25zb2xlLmxvZyBcIlsqXSBUZXN0IE9LXCJcbiAgICAgIGVsc2VcbiAgICAgICAgY29uc29sZS5sb2cgXCJbIV0gVGVzdCBmYWlsZWQhXFxuICAgIEV4cGVjdGVkOiBgI3tleHBlY3RlZH1gICgje3R5cGVvZiBleHBlY3RlZH0pXFxuICAgIEFjdHVhbDogYCN7YWN0dWFsfWAgKCN7dHlwZW9mIGFjdHVhbH0pXCJcbiAgICB0ZXN0IHBhcnNlLCBcImhpXCIsIFwiaGlcIlxuICAgIHRlc3QgcGFyc2UsIFwiKClcIiwgW11cbiAgICB0ZXN0IHBhcnNlLCBcIihoaSlcIiwgW1wiaGlcIl1cbiAgICB0ZXN0IHBhcnNlLCBcIihoZWxsbyB0aGVyZSlcIiwgW1wiaGVsbG9cIiwgXCJ0aGVyZVwiXVxuICAgIHRlc3QgcGFyc2UsIFwiKGhlbGxvICd0aGVyZSlcIiwgW1wiaGVsbG9cIiwgXCIndGhlcmVcIl1cbiAgICB0ZXN0IHBhcnNlLCBcIihoZWxsbyAoMSAyIDMpKVwiLCBbXCJoZWxsb1wiLCBbMSwgMiwgM11dXG4gICAgdGVzdCBwYXJzZSwgXCIoaGVsbG8gKG15IGdvb2QpIG9sZCBmcmllbmQgKCkpXCIsIFtcImhlbGxvXCIsIFtcIm15XCIsIFwiZ29vZFwiXSwgXCJvbGRcIiwgXCJmcmllbmRcIiwgW11dXG4iXX0=
//# sourceURL=/Users/gvieira/code/hare/hare_framer/src_coffee/parser.coffee
