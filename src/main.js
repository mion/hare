// Generated by CoffeeScript 1.12.7
(function() {
  var Editor, KeyForCommand, KeyHandler, Parser, SAtom, SExpression, SList, Token, __, _walk, beautify, compile, editor, evaluate, inconsolata, key, keyHandler, render, walk,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  __ = require('./utils');

  beautify = require('js-beautify').js_beautify;

  Parser = require('./parser');

  inconsolata = Utils.loadWebFont("Inconsolata");

  Parser.test();

  SExpression = (function() {
    function SExpression(tokens1, parent1, program1) {
      var sibling;
      this.tokens = tokens1;
      this.parent = parent1;
      this.program = program1;
      this.id = _.uniqueId('sexp_');
      this.children = [];
      this.previous = null;
      this.next = null;
      if (!_.isNil(this.parent)) {
        if (!_.isEmpty(this.parent.children)) {
          sibling = _.last(this.parent.children);
          this.previous = sibling;
          sibling.next = this;
        }
        this.parent.children.push(this);
      }
    }

    SExpression.prototype.toString = function() {
      if (this.tokens != null) {
        return this.tokens.map(function(t) {
          return t.text;
        }).join(' ');
      } else {
        return "NULL";
      }
    };

    SExpression.prototype.select = function(visitedTokenById, siblingIndex, parentIndex) {
      return _.each(this.tokens, function(token) {
        if (!visitedTokenById[token.id]) {
          visitedTokenById[token.id] = true;
          return token.select(siblingIndex, parentIndex);
        }
      });
    };

    SExpression.prototype.deselect = function(visitedTokenById, siblingIndex, parentIndex) {
      return _.each(this.tokens, function(token) {
        if (!visitedTokenById[token.id]) {
          visitedTokenById[token.id] = true;
          return token.deselect();
        }
      });
    };

    return SExpression;

  })();

  SAtom = (function(superClass) {
    extend(SAtom, superClass);

    function SAtom(token, parent, program) {
      this.isAtom = true;
      this.isList = false;
      SAtom.__super__.constructor.call(this, [token], parent, program);
    }

    return SAtom;

  })(SExpression);

  SList = (function(superClass) {
    extend(SList, superClass);

    function SList(tokens, parent, program) {
      this.isAtom = false;
      this.isList = true;
      SList.__super__.constructor.call(this, tokens, parent, program);
    }

    return SList;

  })(SExpression);

  Token = (function(superClass) {
    extend(Token, superClass);

    Token.prototype.BACKGROUND_COLOR_DESELECTED = '#FFFFFF';

    Token.prototype.TEXT_COLOR_DESELECTED = '#AAA';

    Token.prototype.BACKGROUND_COLOR_SELECTED = '#F8F8F8';

    Token.prototype.TEXT_COLOR_SELECTED = '#000000';

    function Token(txt, x, y, tokenGroup) {
      Token.__super__.constructor.call(this, {
        parent: tokenGroup,
        text: txt,
        fontSize: 12,
        fontFamily: inconsolata,
        textAlign: 'center',
        x: x,
        y: y,
        color: this.TEXT_COLOR_DESELECTED,
        backgroundColor: this.BACKGROUND_COLOR_DESELECTED,
        padding: 10
      });
    }

    Token.prototype.select = function(siblingIndex, parentIndex) {
      if (siblingIndex === 0 && parentIndex === 0) {
        this.backgroundColor = '#000';
        return this.color = '#FFF';
      } else if (siblingIndex === 0 && parentIndex === -1) {
        this.backgroundColor = '#555';
        this.color = '#AAA';
        return this.fontWeight = 'bold';
      } else if (siblingIndex !== 0 && parentIndex === 0) {
        this.backgroundColor = '#F2F2F2';
        return this.color = '#000';
      } else {
        this.backgroundColor = '#FFF';
        return this.color = '#BBB';
      }
    };

    Token.prototype.deselect = function() {
      this.backgroundColor = this.BACKGROUND_COLOR_DESELECTED;
      return this.color = this.TEXT_COLOR_DESELECTED;
    };

    return Token;

  })(TextLayer);

  evaluate = function(sexp) {
    var args, operator, thing;
    if (!(_.isArray(sexp) && sexp.length > 0)) {
      return sexp;
    }
    operator = _.head(sexp);
    args = _.tail(sexp);
    if (operator === 'quote') {
      if (args.length === 1) {
        return args[0];
      } else {
        return "ERROR: wrong numbers of arguments";
      }
    }
    if (operator === 'atom') {
      if (args.length === 1) {
        thing = evaluate(args[0]);
        if ((_.isArray(thing) && _.isEmpty(thing)) || _.isString(thing)) {
          return 't';
        } else {
          return [];
        }
      } else {
        return "ERROR: wrong numbers of arguments";
      }
    }
  };

  window.evaluate = evaluate;

  compile = function(program) {
    var arglist, args, body, bodyStr, exps, rest;
    if (!_.isArray(program)) {
      return program;
    }
    if (_.first(program) === 'do') {
      exps = _.chain(program).drop(1).map(compile).value();
      body = _.dropRight(exps).concat("return " + (_.last(exps)) + ";");
      bodyStr = body.join(";\n");
      return "(function () { " + bodyStr + " })()";
    } else if (_.first(program) === 'var') {
      return "var " + program[1] + " = (" + (compile(program[2])) + ")";
    } else if (program[0] === 'func') {
      args = program[1].join(', ');
      rest = _.chain(program).drop(2).map(compile).value();
      return "function (" + args + ") { return (" + rest + "); }";
    } else if (program[0] === '*') {
      return "(" + program[1] + ") * (" + program[2] + ")";
    } else {
      arglist = _.chain(program).tail().map(compile).value();
      return program[0] + "(" + arglist + ")";
    }
  };

  render = function(exp, x, y, tokens, parentSExp, tokenGroup) {
    var lastToken, leftParens, leftParensIndex, rightParens, slist, str;
    if (_.isString(exp)) {
      str = new Token(exp, x, y, tokenGroup);
      tokens.push(str);
      return new SAtom(str, parentSExp, exp);
    } else {
      leftParens = new Token("(", x, y, tokenGroup);
      tokens.push(leftParens);
      leftParensIndex = tokens.length - 1;
      slist = new SList([], parentSExp, exp);
      _.each(exp, function(e) {
        var lastToken;
        lastToken = _.last(tokens);
        return render(e, __.xRight(lastToken), y, tokens, slist, tokenGroup);
      });
      lastToken = _.last(tokens);
      rightParens = new Token(")", __.xRight(lastToken), y, tokenGroup);
      tokens.push(rightParens);
      slist.tokens = tokens.slice(leftParensIndex);
      return slist;
    }
  };

  walk = function(sexp, callback) {
    var visitedSExpressionById, visitedTokenById;
    console.log("walking from: ", sexp.toString());
    visitedSExpressionById = {};
    visitedTokenById = {};
    return _walk(sexp, callback, visitedSExpressionById, visitedTokenById, [0, 0]);
  };

  _walk = function(sexp, callback, visitedSExpressionById, visitedTokenById, indexPair) {
    var nextIndex, parentIndex, previousIndex, siblingIndex, upIndex;
    if (sexp == null) {
      return;
    }
    if (visitedSExpressionById[sexp.id]) {
      return;
    }
    visitedSExpressionById[sexp.id] = true;
    siblingIndex = indexPair[0];
    parentIndex = indexPair[1];
    callback(sexp, visitedTokenById, siblingIndex, parentIndex);
    nextIndex = siblingIndex != null ? siblingIndex + 1 : null;
    previousIndex = siblingIndex != null ? siblingIndex - 1 : null;
    upIndex = parentIndex != null ? parentIndex - 1 : null;
    _walk(sexp.next, callback, visitedSExpressionById, visitedTokenById, [nextIndex, parentIndex]);
    _walk(sexp.previous, callback, visitedSExpressionById, visitedTokenById, [previousIndex, parentIndex]);
    if (sexp.previous == null) {
      return _walk(sexp.parent, callback, visitedSExpressionById, visitedTokenById, [0, upIndex]);
    }
  };

  Editor = (function() {
    function Editor() {
      this.program = ['do', ['var', "size", '32'], ['var', "square", ['func', ['x'], ['*', 'x', 'x']]], ['square', 'size']];
      this.tokenGroup = new Layer;
      this.rootSExp = render(this.program, 0, 0, [], null, this.tokenGroup);
      this.tokenGroup.height = this.rootSExp.tokens[0].height;
      this.tokenGroup.width = _.reduce(_.map(this.rootSExp.tokens, function(t) {
        return t.width;
      }), _.add, 0);
      this.tokenGroup.x = Align.center;
      this.tokenGroup.y = Align.center;
      this.currentSExp = null;
      this.compiledBox = new TextLayer({
        text: 'compiled',
        fontSize: 13,
        fontFamily: inconsolata,
        textAlign: 'left',
        x: this.tokenGroup.x,
        y: __.belowY(this.tokenGroup, 10),
        width: this.tokenGroup.width / 2,
        height: (Screen.height / 2) - (2 * 10) - this.tokenGroup.height,
        color: '#000',
        backgroundColor: '#F6F6F6',
        padding: 10,
        borderColor: '#000',
        borderWidth: 1
      });
      this.outputBox = new TextLayer({
        text: 'output',
        fontSize: 13,
        fontFamily: inconsolata,
        textAlign: 'left',
        x: __.afterX(this.compiledBox, 10),
        y: __.belowY(this.tokenGroup, 10),
        width: this.tokenGroup.width / 2,
        height: (Screen.height / 2) - (2 * 10) - this.tokenGroup.height,
        color: '#000',
        backgroundColor: '#F6F6F6',
        padding: 10,
        borderColor: '#000',
        borderWidth: 1
      });
      console.log(this.rootSExp);
    }

    Editor.prototype.go = function(dir) {
      var targetSExp;
      targetSExp = _.isNil(this.currentSExp) ? this.rootSExp : {
        next: this.currentSExp.next,
        previous: this.currentSExp.previous,
        "in": _.first(this.currentSExp.children),
        out: this.currentSExp.parent
      }[dir];
      if (targetSExp != null) {
        walk(this.rootSExp, function(sexp, visitedTokenById, siblingIndex, parentIndex) {
          return sexp.deselect(visitedTokenById, siblingIndex, parentIndex);
        });
        this.currentSExp = targetSExp;
        return walk(this.currentSExp, function(sexp, visitedTokenById, siblingIndex, parentIndex) {
          return sexp.select(visitedTokenById, siblingIndex, parentIndex);
        });
      } else if (this.currentSExp === this.rootSExp) {
        walk(this.rootSExp, function(sexp, visitedTokenById, siblingIndex, parentIndex) {
          return sexp.deselect(visitedTokenById, siblingIndex, parentIndex);
        });
        return this.currentSExp = null;
      }
    };

    Editor.prototype.goNext = function() {
      return this.go('next');
    };

    Editor.prototype.goPrevious = function() {
      return this.go('previous');
    };

    Editor.prototype.goIn = function() {
      return this.go('in');
    };

    Editor.prototype.goOut = function() {
      return this.go('out');
    };

    Editor.prototype.compile = function() {
      var compiledSource, error, output;
      if (this.currentSExp != null) {
        compiledSource = beautify(compile(this.currentSExp.program), {
          indent_size: 2
        });
        this.compiledBox.text = compiledSource;
        console.log("[*] INPUT\n", this.currentSExp.program);
        console.log("[*] COMPILED\n", compiledSource);
        try {
          output = eval(compiledSource);
          this.outputBox.text = output;
          return console.log("[*] OUTPUT\n", output);
        } catch (error1) {
          error = error1;
          return console.error("[!] OUTPUT\n", error.toString());
        }
      } else {
        return console.log('[!] No expression selected.');
      }
    };

    return Editor;

  })();

  editor = new Editor;

  key = {
    h: 72,
    i: 73,
    j: 74,
    k: 75,
    l: 76,
    space: 32,
    enter: 13,
    shift: 16
  };

  KeyForCommand = {
    GO_IN: key.j,
    GO_OUT: key.k,
    GO_PREVIOUS: key.h,
    GO_NEXT: key.l,
    COMPILE: key.enter
  };

  KeyHandler = (function() {
    function KeyHandler(editor1) {
      this.editor = editor1;
      this.isDown = {};
      Events.wrap(window).addEventListener('keyup', (function(_this) {
        return function(event) {
          console.log('key up', event.keyCode);
          return delete _this.isDown[event.keyCode];
        };
      })(this));
      Events.wrap(window).addEventListener('keydown', (function(_this) {
        return function(event) {
          console.log('key down', event.keyCode);
          _this.isDown[event.keyCode] = true;
          if (event.keyCode === KeyForCommand.GO_IN) {
            _this.editor.goIn();
          }
          if (event.keyCode === KeyForCommand.GO_OUT) {
            _this.editor.goOut();
          }
          if (event.keyCode === KeyForCommand.GO_NEXT) {
            _this.editor.goNext();
          }
          if (event.keyCode === KeyForCommand.GO_PREVIOUS) {
            _this.editor.goPrevious();
          }
          if (event.keyCode === KeyForCommand.COMPILE) {
            return _this.editor.compile();
          }
        };
      })(this));
    }

    return KeyHandler;

  })();

  keyHandler = new KeyHandler(editor);

  console.log('running...');

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIuLiIsInNvdXJjZXMiOlsic3JjX2NvZmZlZS9tYWluLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBR0E7QUFBQSxNQUFBLHVLQUFBO0lBQUE7OztFQUFBLEVBQUEsR0FBSyxPQUFBLENBQVEsU0FBUjs7RUFDTCxRQUFBLEdBQVcsT0FBQSxDQUFRLGFBQVIsQ0FBc0IsQ0FBQzs7RUFDbEMsTUFBQSxHQUFTLE9BQUEsQ0FBUSxVQUFSOztFQUVULFdBQUEsR0FBYyxLQUFLLENBQUMsV0FBTixDQUFrQixhQUFsQjs7RUFFZCxNQUFNLENBQUMsSUFBUCxDQUFBOztFQUVNO0lBQ1MscUJBQUMsT0FBRCxFQUFVLE9BQVYsRUFBbUIsUUFBbkI7QUFDWCxVQUFBO01BRFksSUFBQyxDQUFBLFNBQUQ7TUFBUyxJQUFDLENBQUEsU0FBRDtNQUFTLElBQUMsQ0FBQSxVQUFEO01BQzlCLElBQUMsQ0FBQSxFQUFELEdBQU0sQ0FBQyxDQUFDLFFBQUYsQ0FBVyxPQUFYO01BQ04sSUFBQyxDQUFBLFFBQUQsR0FBWTtNQUNaLElBQUMsQ0FBQSxRQUFELEdBQVk7TUFDWixJQUFDLENBQUEsSUFBRCxHQUFRO01BQ1IsSUFBRyxDQUFJLENBQUMsQ0FBQyxLQUFGLENBQVEsSUFBQyxDQUFBLE1BQVQsQ0FBUDtRQUNFLElBQUcsQ0FBSSxDQUFDLENBQUMsT0FBRixDQUFVLElBQUMsQ0FBQSxNQUFNLENBQUMsUUFBbEIsQ0FBUDtVQUNFLE9BQUEsR0FBVSxDQUFDLENBQUMsSUFBRixDQUFPLElBQUMsQ0FBQSxNQUFNLENBQUMsUUFBZjtVQUNWLElBQUMsQ0FBQSxRQUFELEdBQVk7VUFDWixPQUFPLENBQUMsSUFBUixHQUFlLEtBSGpCOztRQUlBLElBQUMsQ0FBQSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQWpCLENBQXNCLElBQXRCLEVBTEY7O0lBTFc7OzBCQVdiLFFBQUEsR0FBVSxTQUFBO01BQ1IsSUFBRyxtQkFBSDtlQUFpQixJQUFD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IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbiMgSW1wb3J0c1xuIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG5fXyA9IHJlcXVpcmUgJy4vdXRpbHMnXG5iZWF1dGlmeSA9IHJlcXVpcmUoJ2pzLWJlYXV0aWZ5JykuanNfYmVhdXRpZnlcblBhcnNlciA9IHJlcXVpcmUgJy4vcGFyc2VyJ1xuXG5pbmNvbnNvbGF0YSA9IFV0aWxzLmxvYWRXZWJGb250KFwiSW5jb25zb2xhdGFcIilcblxuUGFyc2VyLnRlc3QoKVxuXG5jbGFzcyBTRXhwcmVzc2lvblxuICBjb25zdHJ1Y3RvcjogKEB0b2tlbnMsIEBwYXJlbnQsIEBwcm9ncmFtKSAtPlxuICAgIEBpZCA9IF8udW5pcXVlSWQoJ3NleHBfJylcbiAgICBAY2hpbGRyZW4gPSBbXVxuICAgIEBwcmV2aW91cyA9IG51bGxcbiAgICBAbmV4dCA9IG51bGxcbiAgICBpZiBub3QgXy5pc05pbChAcGFyZW50KVxuICAgICAgaWYgbm90IF8uaXNFbXB0eShAcGFyZW50LmNoaWxkcmVuKVxuICAgICAgICBzaWJsaW5nID0gXy5sYXN0KEBwYXJlbnQuY2hpbGRyZW4pXG4gICAgICAgIEBwcmV2aW91cyA9IHNpYmxpbmdcbiAgICAgICAgc2libGluZy5uZXh0ID0gdGhpc1xuICAgICAgQHBhcmVudC5jaGlsZHJlbi5wdXNoKHRoaXMpXG4gIHRvU3RyaW5nOiAoKSAtPlxuICAgIGlmIEB0b2tlbnM/IHRoZW4gQHRva2Vucy5tYXAoKHQpIC0+IHQudGV4dCkuam9pbignICcpIGVsc2UgXCJOVUxMXCJcbiAgc2VsZWN0OiAodmlzaXRlZFRva2VuQnlJZCwgc2libGluZ0luZGV4LCBwYXJlbnRJbmRleCkgLT5cbiAgICBfLmVhY2ggQHRva2VucywgKHRva2VuKSAtPlxuICAgICAgaWYgbm90IHZpc2l0ZWRUb2tlbkJ5SWRbdG9rZW4uaWRdXG4gICAgICAgIHZpc2l0ZWRUb2tlbkJ5SWRbdG9rZW4uaWRdID0gdHJ1ZVxuICAgICAgICB0b2tlbi5zZWxlY3Qoc2libGluZ0luZGV4LCBwYXJlbnRJbmRleClcbiAgZGVzZWxlY3Q6ICh2aXNpdGVkVG9rZW5CeUlkLCBzaWJsaW5nSW5kZXgsIHBhcmVudEluZGV4KSAtPlxuICAgIF8uZWFjaCBAdG9rZW5zLCAodG9rZW4pIC0+XG4gICAgICBpZiBub3QgdmlzaXRlZFRva2VuQnlJZFt0b2tlbi5pZF1cbiAgICAgICAgdmlzaXRlZFRva2VuQnlJZFt0b2tlbi5pZF0gPSB0cnVlXG4gICAgICAgIHRva2VuLmRlc2VsZWN0KClcblxuY2xhc3MgU0F0b20gZXh0ZW5kcyBTRXhwcmVzc2lvblxuICBjb25zdHJ1Y3RvcjogKHRva2VuLCBwYXJlbnQsIHByb2dyYW0pIC0+XG4gICAgQGlzQXRvbSA9IHRydWVcbiAgICBAaXNMaXN0ID0gZmFsc2VcbiAgICBzdXBlciBbdG9rZW5dLCBwYXJlbnQsIHByb2dyYW1cblxuY2xhc3MgU0xpc3QgZXh0ZW5kcyBTRXhwcmVzc2lvblxuICBjb25zdHJ1Y3RvcjogKHRva2VucywgcGFyZW50LCBwcm9ncmFtKSAtPlxuICAgIEBpc0F0b20gPSBmYWxzZVxuICAgIEBpc0xpc3QgPSB0cnVlXG4gICAgc3VwZXIgdG9rZW5zLCBwYXJlbnQsIHByb2dyYW1cblxuY2xhc3MgVG9rZW4gZXh0ZW5kcyBUZXh0TGF5ZXJcbiAgQkFDS0dST1VORF9DT0xPUl9ERVNFTEVDVEVEOiAnI0ZGRkZGRidcbiAgVEVYVF9DT0xPUl9ERVNFTEVDVEVEOiAnI0FBQSdcbiAgQkFDS0dST1VORF9DT0xPUl9TRUxFQ1RFRDogJyNGOEY4RjgnXG4gIFRFWFRfQ09MT1JfU0VMRUNURUQ6ICcjMDAwMDAwJ1xuICBjb25zdHJ1Y3RvcjogKHR4dCwgeCwgeSwgdG9rZW5Hcm91cCkgLT5cbiAgICBzdXBlclxuICAgICAgcGFyZW50OiB0b2tlbkdyb3VwXG4gICAgICB0ZXh0OiB0eHRcbiAgICAgIGZvbnRTaXplOiAxMlxuICAgICAgZm9udEZhbWlseTogaW5jb25zb2xhdGFcbiAgICAgIHRleHRBbGlnbjogJ2NlbnRlcidcbiAgICAgIHg6IHhcbiAgICAgIHk6IHlcbiAgICAgIGNvbG9yOiBAVEVYVF9DT0xPUl9ERVNFTEVDVEVEXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IEBCQUNLR1JPVU5EX0NPTE9SX0RFU0VMRUNURURcbiAgICAgIHBhZGRpbmc6IDEwXG4gIHNlbGVjdDogKHNpYmxpbmdJbmRleCwgcGFyZW50SW5kZXgpIC0+XG4gICAgIyBjb25zb2xlLmxvZyBcIicje0B0ZXh0fSdcXG5cXHQtLT5cXHQoI3tzaWJsaW5nSW5kZXh9LCAje3BhcmVudEluZGV4fSlcIlxuICAgIGlmIHNpYmxpbmdJbmRleCA9PSAwICYmIHBhcmVudEluZGV4ID09IDBcbiAgICAgIEBiYWNrZ3JvdW5kQ29sb3IgPSAnIzAwMCdcbiAgICAgIEBjb2xvciA9ICcjRkZGJ1xuICAgIGVsc2UgaWYgc2libGluZ0luZGV4ID09IDAgJiYgcGFyZW50SW5kZXggPT0gLTFcbiAgICAgIEBiYWNrZ3JvdW5kQ29sb3IgPSAnIzU1NSdcbiAgICAgIEBjb2xvciA9ICcjQUFBJ1xuICAgICAgQGZvbnRXZWlnaHQgPSAnYm9sZCdcbiAgICBlbHNlIGlmIHNpYmxpbmdJbmRleCAhPSAwICYmIHBhcmVudEluZGV4ID09IDBcbiAgICAgIEBiYWNrZ3JvdW5kQ29sb3IgPSAnI0YyRjJGMidcbiAgICAgIEBjb2xvciA9ICcjMDAwJ1xuICAgIGVsc2VcbiAgICAgIEBiYWNrZ3JvdW5kQ29sb3IgPSAnI0ZGRidcbiAgICAgIEBjb2xvciA9ICcjQkJCJ1xuICBkZXNlbGVjdDogKCkgLT5cbiAgICBAYmFja2dyb3VuZENvbG9yID0gQEJBQ0tHUk9VTkRfQ09MT1JfREVTRUxFQ1RFRFxuICAgIEBjb2xvciA9IEBURVhUX0NPTE9SX0RFU0VMRUNURURcblxuIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbiMgRVZBTFVBVEVcbiMgd29yayBpbiBwcm9ncmVzc1xuZXZhbHVhdGUgPSAoc2V4cCkgLT5cbiAgcmV0dXJuIHNleHAgdW5sZXNzIF8uaXNBcnJheShzZXhwKSAmJiBzZXhwLmxlbmd0aCA+IDBcbiAgb3BlcmF0b3IgPSBfLmhlYWQoc2V4cClcbiAgYXJncyA9IF8udGFpbChzZXhwKVxuICBpZiBvcGVyYXRvciBpcyAncXVvdGUnXG4gICAgaWYgYXJncy5sZW5ndGggPT0gMVxuICAgICAgcmV0dXJuIGFyZ3NbMF1cbiAgICBlbHNlXG4gICAgICByZXR1cm4gXCJFUlJPUjogd3JvbmcgbnVtYmVycyBvZiBhcmd1bWVudHNcIlxuICBpZiBvcGVyYXRvciBpcyAnYXRvbSdcbiAgICBpZiBhcmdzLmxlbmd0aCA9PSAxXG4gICAgICB0aGluZyA9IGV2YWx1YXRlKGFyZ3NbMF0pXG4gICAgICByZXR1cm4gaWYgKF8uaXNBcnJheSh0aGluZykgYW5kIF8uaXNFbXB0eSh0aGluZykpIG9yIF8uaXNTdHJpbmcodGhpbmcpIHRoZW4gJ3QnIGVsc2UgW11cbiAgICBlbHNlXG4gICAgICByZXR1cm4gXCJFUlJPUjogd3JvbmcgbnVtYmVycyBvZiBhcmd1bWVudHNcIlxuXG53aW5kb3cuZXZhbHVhdGUgPSBldmFsdWF0ZVxuXG4jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuIyBSRU5ERVJcbmNvbXBpbGUgPSAocHJvZ3JhbSkgLT5cbiAgcmV0dXJuIHByb2dyYW0gdW5sZXNzIF8uaXNBcnJheShwcm9ncmFtKVxuICBpZiBfLmZpcnN0KHByb2dyYW0pID09ICdkbydcbiAgICBleHBzID0gXy5jaGFpbihwcm9ncmFtKS5kcm9wKDEpLm1hcChjb21waWxlKS52YWx1ZSgpXG4gICAgYm9keSA9IF8uZHJvcFJpZ2h0KGV4cHMpLmNvbmNhdChcInJldHVybiAje18ubGFzdChleHBzKX07XCIpXG4gICAgYm9keVN0ciA9IGJvZHkuam9pbihcIjtcXG5cIilcbiAgICBcIihmdW5jdGlvbiAoKSB7ICN7Ym9keVN0cn0gfSkoKVwiXG4gIGVsc2UgaWYgXy5maXJzdChwcm9ncmFtKSA9PSAndmFyJ1xuICAgIFwidmFyICN7cHJvZ3JhbVsxXX0gPSAoI3tjb21waWxlKHByb2dyYW1bMl0pfSlcIlxuICBlbHNlIGlmIHByb2dyYW1bMF0gPT0gJ2Z1bmMnXG4gICAgYXJncyA9IHByb2dyYW1bMV0uam9pbignLCAnKVxuICAgIHJlc3QgPSBfLmNoYWluKHByb2dyYW0pLmRyb3AoMikubWFwKGNvbXBpbGUpLnZhbHVlKClcbiAgICBcImZ1bmN0aW9uICgje2FyZ3N9KSB7IHJldHVybiAoI3tyZXN0fSk7IH1cIlxuICBlbHNlIGlmIHByb2dyYW1bMF0gPT0gJyonXG4gICAgXCIoI3twcm9ncmFtWzFdfSkgKiAoI3twcm9ncmFtWzJdfSlcIlxuICBlbHNlXG4gICAgYXJnbGlzdCA9IF8uY2hhaW4ocHJvZ3JhbSkudGFpbCgpLm1hcChjb21waWxlKS52YWx1ZSgpXG4gICAgXCIje3Byb2dyYW1bMF19KCN7YXJnbGlzdH0pXCJcblxuIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbiMgUkVOREVSXG5yZW5kZXIgPSAoZXhwLCB4LCB5LCB0b2tlbnMsIHBhcmVudFNFeHAsIHRva2VuR3JvdXApIC0+XG4gIGlmIF8uaXNTdHJpbmcoZXhwKVxuICAgIHN0ciA9IG5ldyBUb2tlbihleHAsIHgsIHksIHRva2VuR3JvdXApXG4gICAgdG9rZW5zLnB1c2goc3RyKVxuICAgIHJldHVybiBuZXcgU0F0b20oc3RyLCBwYXJlbnRTRXhwLCBleHApXG4gIGVsc2VcbiAgICBsZWZ0UGFyZW5zID0gbmV3IFRva2VuKFwiKFwiLCB4LCB5LCB0b2tlbkdyb3VwKVxuICAgIHRva2Vucy5wdXNoKGxlZnRQYXJlbnMpXG4gICAgbGVmdFBhcmVuc0luZGV4ID0gdG9rZW5zLmxlbmd0aCAtIDFcbiAgICBzbGlzdCA9IG5ldyBTTGlzdChbXSwgcGFyZW50U0V4cCwgZXhwKVxuICAgIF8uZWFjaCBleHAsIChlKSAtPlxuICAgICAgbGFzdFRva2VuID0gXy5sYXN0KHRva2VucylcbiAgICAgIHJlbmRlcihlLCBfXy54UmlnaHQobGFzdFRva2VuKSwgeSwgdG9rZW5zLCBzbGlzdCwgdG9rZW5Hcm91cClcbiAgICBsYXN0VG9rZW4gPSBfLmxhc3QodG9rZW5zKVxuICAgIHJpZ2h0UGFyZW5zID0gbmV3IFRva2VuKFwiKVwiLCBfXy54UmlnaHQobGFzdFRva2VuKSwgeSwgdG9rZW5Hcm91cClcbiAgICB0b2tlbnMucHVzaChyaWdodFBhcmVucylcbiAgICBzbGlzdC50b2tlbnMgPSB0b2tlbnMuc2xpY2UobGVmdFBhcmVuc0luZGV4KVxuICAgIHJldHVybiBzbGlzdFxuXG4jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuIyBXQUxLXG4jICAgVE9ETzogcmVtb3ZlIHRoZXNlIHZhcmlhYmxlcyBmcm9tIHRoZSBmdW5jdGlvbiBoZWFkZXI6IHZpc2l0ZWRTRXhwcmVzc2lvbkJ5SWQgdmlzaXRlZFRva2VuQnlJZFxud2FsayA9IChzZXhwLCBjYWxsYmFjaykgLT5cbiAgY29uc29sZS5sb2cgXCJ3YWxraW5nIGZyb206IFwiLCBzZXhwLnRvU3RyaW5nKClcbiAgdmlzaXRlZFNFeHByZXNzaW9uQnlJZCA9IHt9XG4gIHZpc2l0ZWRUb2tlbkJ5SWQgPSB7fVxuICBfd2FsayhzZXhwLCBjYWxsYmFjaywgdmlzaXRlZFNFeHByZXNzaW9uQnlJZCwgdmlzaXRlZFRva2VuQnlJZCwgWzAsIDBdKVxuXG5fd2FsayA9IChzZXhwLCBjYWxsYmFjaywgdmlzaXRlZFNFeHByZXNzaW9uQnlJZCwgdmlzaXRlZFRva2VuQnlJZCwgaW5kZXhQYWlyKSAtPlxuICByZXR1cm4gdW5sZXNzIHNleHA/XG4gIHJldHVybiBpZiB2aXNpdGVkU0V4cHJlc3Npb25CeUlkW3NleHAuaWRdXG4gIHZpc2l0ZWRTRXhwcmVzc2lvbkJ5SWRbc2V4cC5pZF0gPSB0cnVlXG4gIHNpYmxpbmdJbmRleCA9IGluZGV4UGFpclswXVxuICBwYXJlbnRJbmRleCA9IGluZGV4UGFpclsxXVxuICBjYWxsYmFjayhzZXhwLCB2aXNpdGVkVG9rZW5CeUlkLCBzaWJsaW5nSW5kZXgsIHBhcmVudEluZGV4KVxuICBuZXh0SW5kZXggPSBpZiBzaWJsaW5nSW5kZXg/IHRoZW4gc2libGluZ0luZGV4ICsgMSBlbHNlIG51bGxcbiAgcHJldmlvdXNJbmRleCA9IGlmIHNpYmxpbmdJbmRleD8gdGhlbiBzaWJsaW5nSW5kZXggLSAxIGVsc2UgbnVsbFxuICB1cEluZGV4ID0gaWYgcGFyZW50SW5kZXg/IHRoZW4gcGFyZW50SW5kZXggLSAxIGVsc2UgbnVsbFxuICAjIGRvd25JbmRleCA9IGlmIHBhcmVudEluZGV4PyB0aGVuIHBhcmVudEluZGV4ICsgMSBlbHNlIG51bGxcbiAgX3dhbGsoc2V4cC5uZXh0LCBjYWxsYmFjaywgdmlzaXRlZFNFeHByZXNzaW9uQnlJZCwgdmlzaXRlZFRva2VuQnlJZCwgW25leHRJbmRleCwgcGFyZW50SW5kZXhdKVxuICBfd2FsayhzZXhwLnByZXZpb3VzLCBjYWxsYmFjaywgdmlzaXRlZFNFeHByZXNzaW9uQnlJZCwgdmlzaXRlZFRva2VuQnlJZCwgW3ByZXZpb3VzSW5kZXgsIHBhcmVudEluZGV4XSlcbiAgaWYgbm90IHNleHAucHJldmlvdXM/XG4gICAgX3dhbGsoc2V4cC5wYXJlbnQsIGNhbGxiYWNrLCB2aXNpdGVkU0V4cHJlc3Npb25CeUlkLCB2aXNpdGVkVG9rZW5CeUlkLCBbMCwgdXBJbmRleF0pXG4gICMgX3dhbGsoXy5maXJzdChzZXhwLmNoaWxkcmVuKSwgY2FsbGJhY2ssIHZpc2l0ZWQsIFtudWxsLCBkb3duSW5kZXhdKVxuXG4jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuIyBFRElUT1JcbmNsYXNzIEVkaXRvclxuICBjb25zdHJ1Y3RvcjogKCkgLT5cbiAgICBAcHJvZ3JhbSA9IFtcbiAgICAgICdkbycsXG4gICAgICBbJ3ZhcicsIFwic2l6ZVwiLCAnMzInXSxcbiAgICAgIFsndmFyJywgXCJzcXVhcmVcIixcbiAgICAgICAgWydmdW5jJywgWyd4J10sIFsnKicsICd4JywgJ3gnXV1dLFxuICAgICAgWydzcXVhcmUnLCAnc2l6ZSddXG4gICAgXVxuICAgIEB0b2tlbkdyb3VwID0gbmV3IExheWVyXG4gICAgQHJvb3RTRXhwID0gcmVuZGVyIEBwcm9ncmFtLCAwLCAwLCBbXSwgbnVsbCwgQHRva2VuR3JvdXBcbiAgICBAdG9rZW5Hcm91cC5oZWlnaHQgPSBAcm9vdFNFeHAudG9rZW5zWzBdLmhlaWdodFxuICAgIEB0b2tlbkdyb3VwLndpZHRoID0gXy5yZWR1Y2UoXy5tYXAoQHJvb3RTRXhwLnRva2VucywgKHQpIC0+IHQud2lkdGgpLCBfLmFkZCwgMClcbiAgICBAdG9rZW5Hcm91cC54ID0gQWxpZ24uY2VudGVyXG4gICAgQHRva2VuR3JvdXAueSA9IEFsaWduLmNlbnRlclxuICAgIEBjdXJyZW50U0V4cCA9IG51bGxcbiAgICBAY29tcGlsZWRCb3ggPSBuZXcgVGV4dExheWVyXG4gICAgICB0ZXh0OiAnY29tcGlsZWQnXG4gICAgICBmb250U2l6ZTogMTNcbiAgICAgIGZvbnRGYW1pbHk6IGluY29uc29sYXRhXG4gICAgICB0ZXh0QWxpZ246ICdsZWZ0J1xuICAgICAgeDogQHRva2VuR3JvdXAueFxuICAgICAgeTogX18uYmVsb3dZKEB0b2tlbkdyb3VwLCAxMClcbiAgICAgIHdpZHRoOiBAdG9rZW5Hcm91cC53aWR0aCAvIDJcbiAgICAgIGhlaWdodDogKFNjcmVlbi5oZWlnaHQgLyAyKSAtICgyICogMTApIC0gQHRva2VuR3JvdXAuaGVpZ2h0XG4gICAgICBjb2xvcjogJyMwMDAnXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjRjZGNkY2J1xuICAgICAgcGFkZGluZzogMTBcbiAgICAgIGJvcmRlckNvbG9yOiAnIzAwMCdcbiAgICAgIGJvcmRlcldpZHRoOiAxXG4gICAgQG91dHB1dEJveCA9IG5ldyBUZXh0TGF5ZXJcbiAgICAgIHRleHQ6ICdvdXRwdXQnXG4gICAgICBmb250U2l6ZTogMTNcbiAgICAgIGZvbnRGYW1pbHk6IGluY29uc29sYXRhXG4gICAgICB0ZXh0QWxpZ246ICdsZWZ0J1xuICAgICAgeDogX18uYWZ0ZXJYKEBjb21waWxlZEJveCwgMTApXG4gICAgICB5OiBfXy5iZWxvd1koQHRva2VuR3JvdXAsIDEwKVxuICAgICAgd2lkdGg6IEB0b2tlbkdyb3VwLndpZHRoIC8gMlxuICAgICAgaGVpZ2h0OiAoU2NyZWVuLmhlaWdodCAvIDIpIC0gKDIgKiAxMCkgLSBAdG9rZW5Hcm91cC5oZWlnaHRcbiAgICAgIGNvbG9yOiAnIzAwMCdcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJyNGNkY2RjYnXG4gICAgICBwYWRkaW5nOiAxMFxuICAgICAgYm9yZGVyQ29sb3I6ICcjMDAwJ1xuICAgICAgYm9yZGVyV2lkdGg6IDFcbiAgICBjb25zb2xlLmxvZyhAcm9vdFNFeHApXG4gIGdvOiAoZGlyKSAtPlxuICAgIHRhcmdldFNFeHAgPSBpZiBfLmlzTmlsKEBjdXJyZW50U0V4cClcbiAgICAgIEByb290U0V4cFxuICAgIGVsc2VcbiAgICAgIHtcbiAgICAgICAgbmV4dDogQGN1cnJlbnRTRXhwLm5leHRcbiAgICAgICAgcHJldmlvdXM6IEBjdXJyZW50U0V4cC5wcmV2aW91c1xuICAgICAgICBpbjogXy5maXJzdChAY3VycmVudFNFeHAuY2hpbGRyZW4pXG4gICAgICAgIG91dDogQGN1cnJlbnRTRXhwLnBhcmVudFxuICAgICAgfVtkaXJdXG4gICAgaWYgdGFyZ2V0U0V4cD9cbiAgICAgIHdhbGsgQHJvb3RTRXhwLCAoc2V4cCwgdmlzaXRlZFRva2VuQnlJZCwgc2libGluZ0luZGV4LCBwYXJlbnRJbmRleCkgLT4gc2V4cC5kZXNlbGVjdCh2aXNpdGVkVG9rZW5CeUlkLCBzaWJsaW5nSW5kZXgsIHBhcmVudEluZGV4KVxuICAgICAgQGN1cnJlbnRTRXhwID0gdGFyZ2V0U0V4cFxuICAgICAgd2FsayBAY3VycmVudFNFeHAsIChzZXhwLCB2aXNpdGVkVG9rZW5CeUlkLCBzaWJsaW5nSW5kZXgsIHBhcmVudEluZGV4KSAtPiBzZXhwLnNlbGVjdCh2aXNpdGVkVG9rZW5CeUlkLCBzaWJsaW5nSW5kZXgsIHBhcmVudEluZGV4KVxuICAgIGVsc2UgaWYgQGN1cnJlbnRTRXhwID09IEByb290U0V4cFxuICAgICAgd2FsayBAcm9vdFNFeHAsIChzZXhwLCB2aXNpdGVkVG9rZW5CeUlkLCBzaWJsaW5nSW5kZXgsIHBhcmVudEluZGV4KSAtPiBzZXhwLmRlc2VsZWN0KHZpc2l0ZWRUb2tlbkJ5SWQsIHNpYmxpbmdJbmRleCwgcGFyZW50SW5kZXgpXG4gICAgICBAY3VycmVudFNFeHAgPSBudWxsXG4gIGdvTmV4dDogKCkgLT5cbiAgICBAZ28oJ25leHQnKVxuICBnb1ByZXZpb3VzOiAoKSAtPlxuICAgIEBnbygncHJldmlvdXMnKVxuICBnb0luOiAoKSAtPlxuICAgIEBnbygnaW4nKVxuICBnb091dDogKCkgLT5cbiAgICBAZ28oJ291dCcpXG4gIGNvbXBpbGU6ICgpIC0+XG4gICAgaWYgQGN1cnJlbnRTRXhwP1xuICAgICAgY29tcGlsZWRTb3VyY2UgPSBiZWF1dGlmeShjb21waWxlKEBjdXJyZW50U0V4cC5wcm9ncmFtKSwgeyBpbmRlbnRfc2l6ZTogMiB9KVxuICAgICAgQGNvbXBpbGVkQm94LnRleHQgPSBjb21waWxlZFNvdXJjZVxuICAgICAgY29uc29sZS5sb2coXCJbKl0gSU5QVVRcXG5cIiwgQGN1cnJlbnRTRXhwLnByb2dyYW0pXG4gICAgICBjb25zb2xlLmxvZyhcIlsqXSBDT01QSUxFRFxcblwiLCBjb21waWxlZFNvdXJjZSlcbiAgICAgIHRyeVxuICAgICAgICBvdXRwdXQgPSBldmFsKGNvbXBpbGVkU291cmNlKVxuICAgICAgICBAb3V0cHV0Qm94LnRleHQgPSBvdXRwdXRcbiAgICAgICAgY29uc29sZS5sb2coXCJbKl0gT1VUUFVUXFxuXCIsIG91dHB1dClcbiAgICAgIGNhdGNoIGVycm9yXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJbIV0gT1VUUFVUXFxuXCIsIGVycm9yLnRvU3RyaW5nKCkpXG4gICAgZWxzZVxuICAgICAgY29uc29sZS5sb2cgJ1shXSBObyBleHByZXNzaW9uIHNlbGVjdGVkLidcblxuZWRpdG9yID0gbmV3IEVkaXRvclxuXG5rZXkgPVxuICBoOiA3MlxuICBpOiA3M1xuICBqOiA3NFxuICBrOiA3NVxuICBsOiA3NlxuICBzcGFjZTogMzJcbiAgZW50ZXI6IDEzXG4gIHNoaWZ0OiAxNlxuXG5LZXlGb3JDb21tYW5kID1cbiAgR09fSU46IGtleS5qXG4gIEdPX09VVDoga2V5LmtcbiAgR09fUFJFVklPVVM6IGtleS5oXG4gIEdPX05FWFQ6IGtleS5sXG4gIENPTVBJTEU6IGtleS5lbnRlclxuXG5jbGFzcyBLZXlIYW5kbGVyXG4gIGNvbnN0cnVjdG9yOiAoQGVkaXRvcikgLT5cbiAgICBAaXNEb3duID0ge31cbiAgICBFdmVudHMud3JhcCh3aW5kb3cpLmFkZEV2ZW50TGlzdGVuZXIgJ2tleXVwJywgKGV2ZW50KSA9PlxuICAgICAgY29uc29sZS5sb2cgJ2tleSB1cCcsIGV2ZW50LmtleUNvZGVcbiAgICAgIGRlbGV0ZSBAaXNEb3duW2V2ZW50LmtleUNvZGVdXG4gICAgRXZlbnRzLndyYXAod2luZG93KS5hZGRFdmVudExpc3RlbmVyICdrZXlkb3duJywgKGV2ZW50KSA9PlxuICAgICAgY29uc29sZS5sb2cgJ2tleSBkb3duJywgZXZlbnQua2V5Q29kZVxuICAgICAgQGlzRG93bltldmVudC5rZXlDb2RlXSA9IHRydWVcbiAgICAgIGlmIGV2ZW50LmtleUNvZGUgaXMgS2V5Rm9yQ29tbWFuZC5HT19JTlxuICAgICAgICBAZWRpdG9yLmdvSW4oKVxuICAgICAgaWYgZXZlbnQua2V5Q29kZSBpcyBLZXlGb3JDb21tYW5kLkdPX09VVFxuICAgICAgICBAZWRpdG9yLmdvT3V0KClcbiAgICAgIGlmIGV2ZW50LmtleUNvZGUgaXMgS2V5Rm9yQ29tbWFuZC5HT19ORVhUXG4gICAgICAgIEBlZGl0b3IuZ29OZXh0KClcbiAgICAgIGlmIGV2ZW50LmtleUNvZGUgaXMgS2V5Rm9yQ29tbWFuZC5HT19QUkVWSU9VU1xuICAgICAgICBAZWRpdG9yLmdvUHJldmlvdXMoKVxuICAgICAgaWYgZXZlbnQua2V5Q29kZSBpcyBLZXlGb3JDb21tYW5kLkNPTVBJTEVcbiAgICAgICAgQGVkaXRvci5jb21waWxlKClcblxua2V5SGFuZGxlciA9IG5ldyBLZXlIYW5kbGVyKGVkaXRvcilcblxuY29uc29sZS5sb2cgJ3J1bm5pbmcuLi4nXG4iXX0=
//# sourceURL=/Users/gvieira/code/hare/hare_framer/src_coffee/main.coffee