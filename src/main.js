// Generated by CoffeeScript 1.12.7
(function() {
  var Compiler, Editor, KeyForCommand, KeyHandler, Parser, SAtom, SExpression, SList, StorageLoader, StorageSaver, Token, __, _spliceSexp, _walk, addSexpAfter, addSexpBefore, beautify, deleteSexp, editor, evaluate, getSexp, inconsolata, isAtom, key, keyHandler, lg, render, replaceSexp, spliceSexp, walk,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  __ = require('./utils');

  beautify = require('js-beautify').js_beautify;

  Parser = require('./parser');

  Compiler = require('./compiler');

  inconsolata = Utils.loadWebFont("Inconsolata");

  lg = console.log;

  StorageSaver = (function() {
    function StorageSaver() {}

    StorageSaver.prototype.save = function(program) {
      var programJSONString;
      programJSONString = JSON.stringify(program);
      return localStorage.setItem('hare-program', programJSONString);
    };

    return StorageSaver;

  })();

  StorageLoader = (function() {
    function StorageLoader() {}

    StorageLoader.prototype.load = function() {
      var programJSONString;
      programJSONString = localStorage.getItem('hare-program');
      if (_.isString(programJSONString) && (!_.isEmpty(programJSONString))) {
        return JSON.parse(programJSONString);
      } else {
        return [];
      }
    };

    return StorageLoader;

  })();

  SExpression = (function() {
    function SExpression(tokens1, parent1, program1) {
      var sibling;
      this.tokens = tokens1;
      this.parent = parent1;
      this.program = program1;
      this.id = _.uniqueId('sexp_');
      this.children = [];
      this.previous = null;
      this.next = null;
      if (!_.isNil(this.parent)) {
        if (!_.isEmpty(this.parent.children)) {
          sibling = _.last(this.parent.children);
          this.previous = sibling;
          sibling.next = this;
        }
        this.parent.children.push(this);
      }
    }

    SExpression.prototype.toString = function() {
      if (this.tokens != null) {
        return this.tokens.map(function(t) {
          return t.text;
        }).join(' ');
      } else {
        return "NULL";
      }
    };

    SExpression.prototype.select = function(visitedTokenById, siblingIndex, parentIndex) {
      return _.each(this.tokens, function(token) {
        if (!visitedTokenById[token.id]) {
          visitedTokenById[token.id] = true;
          return token.select(siblingIndex, parentIndex);
        }
      });
    };

    SExpression.prototype.deselect = function(visitedTokenById, siblingIndex, parentIndex) {
      return _.each(this.tokens, function(token) {
        if (!visitedTokenById[token.id]) {
          visitedTokenById[token.id] = true;
          return token.deselect();
        }
      });
    };

    SExpression.prototype.destroy = function() {
      return _.each(this.tokens, function(token) {
        return token.destroy();
      });
    };

    return SExpression;

  })();

  SAtom = (function(superClass) {
    extend(SAtom, superClass);

    function SAtom(token, parent, program) {
      this.isAtom = true;
      this.isList = false;
      SAtom.__super__.constructor.call(this, [token], parent, program);
    }

    return SAtom;

  })(SExpression);

  SList = (function(superClass) {
    extend(SList, superClass);

    function SList(tokens, parent, program) {
      this.isAtom = false;
      this.isList = true;
      SList.__super__.constructor.call(this, tokens, parent, program);
    }

    return SList;

  })(SExpression);

  Token = (function(superClass) {
    extend(Token, superClass);

    Token.prototype.BACKGROUND_COLOR_DESELECTED = '#FFFFFF';

    Token.prototype.TEXT_COLOR_DESELECTED = '#AAA';

    Token.prototype.BACKGROUND_COLOR_SELECTED = '#F8F8F8';

    Token.prototype.TEXT_COLOR_SELECTED = '#000000';

    function Token(txt, x, y, tokenGroup) {
      Token.__super__.constructor.call(this, {
        parent: tokenGroup,
        text: txt,
        fontSize: 12,
        fontFamily: inconsolata,
        textAlign: 'center',
        x: x,
        y: y,
        color: this.TEXT_COLOR_DESELECTED,
        backgroundColor: this.BACKGROUND_COLOR_DESELECTED,
        padding: 7
      });
    }

    Token.prototype.select = function(siblingIndex, parentIndex) {
      if (siblingIndex === 0 && parentIndex === 0) {
        this.backgroundColor = '#000';
        return this.color = '#FFF';
      } else if (siblingIndex === 0 && parentIndex === -1) {
        this.backgroundColor = '#555';
        this.color = '#AAA';
        return this.fontWeight = 'bold';
      } else if (siblingIndex !== 0 && parentIndex === 0) {
        this.backgroundColor = '#F2F2F2';
        return this.color = '#000';
      } else {
        this.backgroundColor = '#FFF';
        return this.color = '#BBB';
      }
    };

    Token.prototype.deselect = function() {
      this.backgroundColor = this.BACKGROUND_COLOR_DESELECTED;
      return this.color = this.TEXT_COLOR_DESELECTED;
    };

    return Token;

  })(TextLayer);

  evaluate = function(sexp) {
    var args, operator, thing;
    if (!(_.isArray(sexp) && sexp.length > 0)) {
      return sexp;
    }
    operator = _.head(sexp);
    args = _.tail(sexp);
    if (operator === 'quote') {
      if (args.length === 1) {
        return args[0];
      } else {
        return "ERROR: wrong numbers of arguments";
      }
    }
    if (operator === 'atom') {
      if (args.length === 1) {
        thing = evaluate(args[0]);
        if ((_.isArray(thing) && _.isEmpty(thing)) || _.isString(thing)) {
          return 't';
        } else {
          return [];
        }
      } else {
        return "ERROR: wrong numbers of arguments";
      }
    }
  };

  window.evaluate = evaluate;

  isAtom = function(exp) {
    return _.isString(exp) || _.isNumber(exp) || _.isBoolean(exp);
  };

  render = function(exp, x, y, tokens, parentSExp, tokenGroup) {
    var lastToken, leftParens, leftParensIndex, rightParens, slist, str;
    if (isAtom(exp)) {
      str = new Token(exp, x, y, tokenGroup);
      tokens.push(str);
      return new SAtom(str, parentSExp, exp);
    } else {
      leftParens = new Token("(", x, y, tokenGroup);
      tokens.push(leftParens);
      leftParensIndex = tokens.length - 1;
      slist = new SList([], parentSExp, exp);
      _.each(exp, function(e) {
        var lastToken;
        lastToken = _.last(tokens);
        return render(e, __.xRight(lastToken), y, tokens, slist, tokenGroup);
      });
      lastToken = _.last(tokens);
      rightParens = new Token(")", __.xRight(lastToken), y, tokenGroup);
      tokens.push(rightParens);
      slist.tokens = tokens.slice(leftParensIndex);
      return slist;
    }
  };

  walk = function(sexp, callback) {
    var visitedSExpressionById, visitedTokenById;
    visitedSExpressionById = {};
    visitedTokenById = {};
    return _walk(sexp, callback, visitedSExpressionById, visitedTokenById, [0, 0]);
  };

  _walk = function(sexp, callback, visitedSExpressionById, visitedTokenById, indexPair) {
    var nextIndex, parentIndex, previousIndex, siblingIndex, upIndex;
    if (sexp == null) {
      return;
    }
    if (visitedSExpressionById[sexp.id]) {
      return;
    }
    visitedSExpressionById[sexp.id] = true;
    siblingIndex = indexPair[0];
    parentIndex = indexPair[1];
    callback(sexp, visitedTokenById, siblingIndex, parentIndex);
    nextIndex = siblingIndex != null ? siblingIndex + 1 : null;
    previousIndex = siblingIndex != null ? siblingIndex - 1 : null;
    upIndex = parentIndex != null ? parentIndex - 1 : null;
    _walk(sexp.next, callback, visitedSExpressionById, visitedTokenById, [nextIndex, parentIndex]);
    _walk(sexp.previous, callback, visitedSExpressionById, visitedTokenById, [previousIndex, parentIndex]);
    if (sexp.previous == null) {
      return _walk(sexp.parent, callback, visitedSExpressionById, visitedTokenById, [0, upIndex]);
    }
  };

  spliceSexp = function(program, position, value, deltaIndex, deleteCount) {
    if (_.isUndefined(deltaIndex)) {
      deltaIndex = 0;
    }
    if (_.isUndefined(deleteCount)) {
      deleteCount = 0;
    }
    return _spliceSexp(program, _.clone(position), value, deltaIndex, deleteCount);
  };

  _spliceSexp = function(program, position, value, deltaIndex, deleteCount) {
    var idx;
    idx = position.pop();
    if (idx != null) {
      if (typeof _.isEmpty === "function" ? _.isEmpty(position) : void 0) {
        if (typeof _.isUndefined === "function" ? _.isUndefined(value) : void 0) {
          return program.splice(idx + deltaIndex, deleteCount);
        } else {
          return program.splice(idx + deltaIndex, deleteCount, value);
        }
      } else {
        return _spliceSexp(program[idx], position, value, deltaIndex, deleteCount);
      }
    }
  };

  deleteSexp = function(program, position, value) {
    return spliceSexp(program, position, void 0, 0, 1);
  };

  replaceSexp = function(program, position, value) {
    return spliceSexp(program, position, value, 0, 1);
  };

  addSexpBefore = function(program, position, value) {
    return spliceSexp(program, position, value, 0);
  };

  addSexpAfter = function(program, position, value) {
    return spliceSexp(program, position, value, 1);
  };

  getSexp = function(sexp, position) {
    var idx;
    idx = position.pop();
    if (idx != null) {
      return getSexp(sexp.children[idx], position);
    } else {
      return sexp;
    }
  };

  Editor = (function() {
    function Editor(storageSaver, storageLoader) {
      this.storageSaver = storageSaver;
      this.storageLoader = storageLoader;
      this.compiledBox = new TextLayer({
        text: 'compiled',
        fontSize: 13,
        fontFamily: inconsolata,
        textAlign: 'left',
        x: 0,
        y: Screen.height / 2,
        width: Screen.width / 2,
        height: Screen.height / 2,
        color: '#000',
        backgroundColor: '#F6F6F6',
        padding: 10,
        borderColor: '#000',
        borderWidth: 1
      });
      this.outputBox = new TextLayer({
        text: 'output',
        fontSize: 13,
        fontFamily: inconsolata,
        textAlign: 'left',
        x: Screen.width / 2,
        y: Screen.height / 2,
        width: Screen.width / 2,
        height: Screen.height / 2,
        color: '#000',
        backgroundColor: '#F6F6F6',
        padding: 10,
        borderColor: '#000',
        borderWidth: 1
      });
    }

    Editor.prototype.build = function(program) {
      if (_.isUndefined(program)) {
        program = this.storageLoader.load();
      }
      if (!_.isUndefined(this.tokenGroup)) {
        this.tokenGroup.destroy();
      }
      this.program = program;
      this.currentPosition = [];
      this.currentSExp = null;
      this.tokenGroup = new Layer({
        backgroundColor: 'rgba(255, 255, 255, 0.0)'
      });
      this.rootSExp = render(this.program, 0, 0, [], null, this.tokenGroup);
      this.tokenGroup.height = this.rootSExp.tokens[0].height;
      this.tokenGroup.width = _.reduce(_.map(this.rootSExp.tokens, function(t) {
        return t.width;
      }), _.add, 0);
      this.tokenGroup.x = Align.center;
      return this.tokenGroup.y = (Screen.height / 2) - this.tokenGroup.height - 10;
    };

    Editor.prototype.jump = function(pos) {
      var newSexp;
      this.currentPosition = _.clone(pos);
      newSexp = getSexp(this.rootSExp, pos);
      return this.setCurrentSExp(newSexp);
    };

    Editor.prototype.go = function(dir) {
      var targetSExp;
      if (_.isNil(this.currentSExp) && dir !== 'in') {
        return false;
      }
      targetSExp = _.isNil(this.currentSExp) ? this.rootSExp : {
        next: this.currentSExp.next,
        previous: this.currentSExp.previous,
        "in": _.first(this.currentSExp.children),
        out: this.currentSExp.parent
      }[dir];
      if (targetSExp != null) {
        this.setCurrentSExp(targetSExp);
        return true;
      } else if (this.currentSExp === this.rootSExp && dir === 'out') {
        this.setCurrentSExp(null);
        return true;
      } else {
        return false;
      }
    };

    Editor.prototype.setCurrentSExp = function(newSexp) {
      walk(this.rootSExp, function(sexp, visitedTokenById, siblingIndex, parentIndex) {
        return sexp.deselect(visitedTokenById, siblingIndex, parentIndex);
      });
      if (newSexp != null) {
        this.currentSExp = newSexp;
        return walk(this.currentSExp, function(sexp, visitedTokenById, siblingIndex, parentIndex) {
          return sexp.select(visitedTokenById, siblingIndex, parentIndex);
        });
      } else {
        return this.currentSExp = null;
      }
    };

    Editor.prototype.goNext = function() {
      if (this.go('next')) {
        return this.currentPosition[0] += 1;
      }
    };

    Editor.prototype.goPrevious = function() {
      if (this.go('previous')) {
        return this.currentPosition[0] -= 1;
      }
    };

    Editor.prototype.goIn = function() {
      var sexp;
      sexp = this.currentSExp;
      if (this.go('in') && this.currentSExp !== this.rootSExp) {
        this.currentPosition.unshift(0);
        return this.detach(sexp);
      }
    };

    Editor.prototype.goOut = function() {
      var sexp;
      sexp = this.currentSExp;
      if (this.go('out') && this.currentSExp !== null) {
        this.currentPosition.shift();
        lg('retach: ', this.currentSExp);
        return this.retach(this.currentSExp);
      }
    };

    Editor.prototype.compile = function() {
      var beautifulSource, compiledSource, error, output;
      if (this.currentSExp != null) {
        compiledSource = Compiler.compile(this.currentSExp.program);
        beautifulSource = beautify(compiledSource, {
          indent_size: 2
        });
        this.compiledBox.text = compiledSource;
        console.log("[*] INPUT\n", this.currentSExp.program);
        console.log("[*] COMPILED\n", compiledSource);
        try {
          output = eval(compiledSource);
          this.outputBox.text = output;
          return console.log("[*] RUN OK\n", output);
        } catch (error1) {
          error = error1;
          console.log("[!] RUN ERROR\n", error);
          return this.outputBox.text = error.toString();
        }
      } else {
        return console.log('[!] No expression selected.');
      }
    };

    Editor.prototype.addBefore = function() {
      var pos, rawValue, sexp, value;
      sexp = this.currentSExp;
      if (sexp != null) {
        rawValue = prompt("Add what?");
        if (rawValue != null) {
          value = Parser.parse(rawValue);
          lg('Value: ', value);
          pos = _.clone(this.currentPosition);
          addSexpBefore(this.program, _.clone(pos), value);
          lg('currentPosition: ', pos);
          this.build(this.program);
          this.jump(_.clone(pos));
          lg(this.program);
          return this.storageSaver.save(this.program);
        }
      }
    };

    Editor.prototype.addAfter = function() {
      var pos, rawValue, sexp, value;
      sexp = this.currentSExp;
      if (sexp != null) {
        rawValue = prompt("Add what?");
        if (rawValue != null) {
          value = Parser.parse(rawValue);
          lg('Value: ', value);
          pos = _.clone(this.currentPosition);
          addSexpAfter(this.program, _.clone(pos), value, 1);
          lg('currentPosition: ', pos);
          this.build(this.program);
          if (pos.length > 0) {
            pos[0] += 1;
          }
          this.jump(pos);
          lg(this.program);
          return this.storageSaver.save(this.program);
        }
      }
    };

    Editor.prototype["delete"] = function() {
      var pos;
      if (this.currentSExp != null) {
        pos = _.clone(this.currentPosition);
        deleteSexp(this.program, this.currentPosition);
        this.build(this.program);
        if (pos[0] > 0) {
          pos[0] -= 1;
        }
        this.jump(pos);
        return this.storageSaver.save(this.program);
      }
    };

    Editor.prototype.replace = function() {
      var pos, rawValue, sexp, value;
      sexp = this.currentSExp;
      if (sexp != null) {
        rawValue = prompt("Replace '" + sexp + "' with what?");
        if (rawValue != null) {
          value = Parser.parse(rawValue);
          lg('Value: ', value);
          pos = _.clone(this.currentPosition);
          replaceSexp(this.program, _.clone(pos), value);
          lg('currentPosition: ', pos);
          this.build(this.program);
          this.jump(_.clone(pos));
          lg(this.program);
          return this.storageSaver.save(this.program);
        }
      }
    };

    Editor.prototype.detach = function(sexp) {
      var dy;
      return dy = 50;
    };

    Editor.prototype.retach = function(sexp) {
      var dy;
      return dy = 50;
    };

    return Editor;

  })();

  editor = new Editor(new StorageSaver(), new StorageLoader());

  editor.build();

  key = {
    h: 72,
    i: 73,
    j: 74,
    k: 75,
    l: 76,
    r: 82,
    a: 65,
    w: 87,
    s: 83,
    d: 68,
    ";": 186,
    space: 32,
    enter: 13,
    shift: 16
  };

  KeyForCommand = {
    GO_IN: key.j,
    GO_OUT: key.k,
    GO_PREVIOUS: key.h,
    GO_NEXT: key.l,
    COMPILE: key.enter,
    REPLACE: key.r,
    ADD_BEFORE: key.a,
    ADD_AFTER: key.i,
    DELETE: key.d,
    DETACH: key.space
  };

  KeyHandler = (function() {
    function KeyHandler(editor1) {
      this.editor = editor1;
      this.isDown = {};
      Events.wrap(window).addEventListener('keyup', (function(_this) {
        return function(event) {
          return delete _this.isDown[event.keyCode];
        };
      })(this));
      Events.wrap(window).addEventListener('keydown', (function(_this) {
        return function(event) {
          var currPos;
          console.log('key down', event.keyCode);
          currPos = _.clone(editor.currentPosition);
          _this.isDown[event.keyCode] = true;
          if (event.keyCode === KeyForCommand.GO_IN) {
            _this.editor.goIn();
          }
          if (event.keyCode === KeyForCommand.GO_OUT) {
            _this.editor.goOut();
          }
          if (event.keyCode === KeyForCommand.GO_NEXT) {
            _this.editor.goNext();
          }
          if (event.keyCode === KeyForCommand.GO_PREVIOUS) {
            _this.editor.goPrevious();
          }
          if (event.keyCode === KeyForCommand.COMPILE) {
            _this.editor.compile();
          }
          if (event.keyCode === KeyForCommand.REPLACE) {
            _this.editor.replace();
          }
          if (event.keyCode === KeyForCommand.ADD_BEFORE) {
            _this.editor.addBefore();
          }
          if (event.keyCode === KeyForCommand.ADD_AFTER) {
            _this.editor.addAfter();
          }
          if (event.keyCode === KeyForCommand.DELETE) {
            _this.editor["delete"]();
          }
          if (event.keyCode === KeyForCommand.DETACH) {
            _this.editor.detach();
          }
          return lg("current position", editor.currentPosition);
        };
      })(this));
    }

    return KeyHandler;

  })();

  keyHandler = new KeyHandler(editor);

  console.log('running...');

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/gvieira/code/hare/hare_framer/src_coffee/main.coffee