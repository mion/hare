// Generated by CoffeeScript 1.12.7
(function() {
  var Editor, KeyForCommand, KeyHandler, Parser, SAtom, SExpression, SList, Token, Walker, __, editor, evaluate, inconsolata, key, keyHandler, render,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  __ = require('./utils');

  Parser = require('./parser');

  inconsolata = Utils.loadWebFont("Inconsolata");

  Parser.test();

  SExpression = (function() {
    function SExpression(tokens1, parent1) {
      var sibling;
      this.tokens = tokens1;
      this.parent = parent1;
      this.children = [];
      this.previous = null;
      this.next = null;
      if (!_.isNil(this.parent)) {
        if (!_.isEmpty(this.parent.children)) {
          sibling = _.last(this.parent.children);
          this.previous = sibling;
          sibling.next = this;
        }
        this.parent.children.push(this);
      }
    }

    SExpression.prototype.select = function() {
      return _.each(this.tokens, function(token) {
        return token.select();
      });
    };

    SExpression.prototype.deselect = function() {
      return _.each(this.tokens, function(token) {
        return token.deselect();
      });
    };

    return SExpression;

  })();

  SAtom = (function(superClass) {
    extend(SAtom, superClass);

    function SAtom(token, parent) {
      SAtom.__super__.constructor.call(this, [token], parent);
    }

    return SAtom;

  })(SExpression);

  SList = (function(superClass) {
    extend(SList, superClass);

    function SList(tokens, parent) {
      SList.__super__.constructor.call(this, tokens, parent);
    }

    return SList;

  })(SExpression);

  Token = (function(superClass) {
    extend(Token, superClass);

    Token.prototype.BACKGROUND_COLOR_DESELECTED = '#FFFFFF';

    Token.prototype.TEXT_COLOR_DESELECTED = '#AAA';

    Token.prototype.BACKGROUND_COLOR_SELECTED = '#F8F8F8';

    Token.prototype.TEXT_COLOR_SELECTED = '#000000';

    function Token(txt, x, y) {
      Token.__super__.constructor.call(this, {
        text: txt,
        fontSize: 15,
        fontFamily: inconsolata,
        textAlign: 'center',
        x: x,
        y: y,
        color: this.TEXT_COLOR_DESELECTED,
        backgroundColor: this.BACKGROUND_COLOR_DESELECTED,
        borderWidth: 1,
        borderColor: '#FEFEFE',
        padding: 10
      });
    }

    Token.prototype.select = function() {
      this.backgroundColor = this.BACKGROUND_COLOR_SELECTED;
      return this.color = this.TEXT_COLOR_SELECTED;
    };

    Token.prototype.deselect = function() {
      this.backgroundColor = this.BACKGROUND_COLOR_DESELECTED;
      return this.color = this.TEXT_COLOR_DESELECTED;
    };

    return Token;

  })(TextLayer);

  evaluate = function(sexp) {
    var args, operator, thing;
    if (!(_.isArray(sexp) && sexp.length > 0)) {
      return sexp;
    }
    operator = _.head(sexp);
    args = _.tail(sexp);
    if (operator === 'quote') {
      if (args.length === 1) {
        return args[0];
      } else {
        return "ERROR: wrong numbers of arguments";
      }
    }
    if (operator === 'atom') {
      if (args.length === 1) {
        thing = evaluate(args[0]);
        if ((_.isArray(thing) && _.isEmpty(thing)) || _.isString(thing)) {
          return 't';
        } else {
          return [];
        }
      } else {
        return "ERROR: wrong numbers of arguments";
      }
    }
  };

  window.evaluate = evaluate;

  render = function(exp, x, y, tokens, parentSExp) {
    var lastToken, leftParens, leftParensIndex, rightParens, slist, str;
    if (_.isString(exp)) {
      str = new Token(exp, x, y);
      tokens.push(str);
      return new SAtom(str, parentSExp);
    } else {
      leftParens = new Token("(", x, y);
      tokens.push(leftParens);
      leftParensIndex = tokens.length - 1;
      slist = new SList([], parentSExp);
      _.each(exp, function(e) {
        var lastToken;
        lastToken = _.last(tokens);
        return render(e, __.xRight(lastToken), y, tokens, slist);
      });
      lastToken = _.last(tokens);
      rightParens = new Token(")", __.xRight(lastToken), y);
      tokens.push(rightParens);
      slist.tokens = tokens.slice(leftParensIndex);
      return slist;
    }
  };

  Walker = (function() {
    function Walker(node) {
      this.node = node;
    }

    return Walker;

  })();

  Editor = (function() {
    function Editor() {
      this.program = ['do', ['let', "'size", '32'], ['let', "'square", ['func', ['x'], ['*', 'x', 'x']]], ['square', 'size']];
      this.rootSExp = render(this.program, 50, 100, []);
      this.currentSExp = null;
      console.log(this.rootSExp);
    }

    Editor.prototype.goNext = function() {
      if (_.isNil(this.currentSExp)) {
        return;
      }
      if (_.isNil(this.currentSExp.next)) {
        return;
      }
      this.currentSExp.deselect();
      this.currentSExp = this.currentSExp.next;
      return this.currentSExp.select();
    };

    Editor.prototype.goPrevious = function() {
      if (_.isNil(this.currentSExp)) {
        return;
      }
      if (_.isNil(this.currentSExp.previous)) {
        return;
      }
      this.currentSExp.deselect();
      this.currentSExp = this.currentSExp.previous;
      return this.currentSExp.select();
    };

    Editor.prototype.goIn = function() {
      if (_.isNil(this.currentSExp)) {
        this.currentSExp = this.rootSExp;
        return this.currentSExp.select();
      } else {
        if (!_.isEmpty(this.currentSExp.children)) {
          this.currentSExp.deselect();
          this.currentSExp = _.first(this.currentSExp.children);
          return this.currentSExp.select();
        }
      }
    };

    Editor.prototype.goOut = function() {
      if (_.isNil(this.currentSExp)) {
        return;
      }
      this.currentSExp.deselect();
      this.currentSExp = this.currentSExp.parent;
      if (!_.isNil(this.currentSExp)) {
        return this.currentSExp.select();
      }
    };

    return Editor;

  })();

  editor = new Editor;

  key = {
    h: 72,
    i: 73,
    j: 74,
    k: 75,
    l: 76,
    space: 32,
    enter: 13,
    shift: 16
  };

  KeyForCommand = {
    GO_IN: key.j,
    GO_OUT: key.k,
    GO_PREVIOUS: key.h,
    GO_NEXT: key.l
  };

  KeyHandler = (function() {
    function KeyHandler(editor1) {
      this.editor = editor1;
      this.isDown = {};
      Events.wrap(window).addEventListener('keyup', (function(_this) {
        return function(event) {
          console.log('key up', event.keyCode);
          return delete _this.isDown[event.keyCode];
        };
      })(this));
      Events.wrap(window).addEventListener('keydown', (function(_this) {
        return function(event) {
          console.log('key down', event.keyCode);
          _this.isDown[event.keyCode] = true;
          if (event.keyCode === KeyForCommand.GO_IN) {
            _this.editor.goIn();
          }
          if (event.keyCode === KeyForCommand.GO_OUT) {
            _this.editor.goOut();
          }
          if (event.keyCode === KeyForCommand.GO_NEXT) {
            _this.editor.goNext();
          }
          if (event.keyCode === KeyForCommand.GO_PREVIOUS) {
            return _this.editor.goPrevious();
          }
        };
      })(this));
    }

    return KeyHandler;

  })();

  keyHandler = new KeyHandler(editor);

  console.log('running...');

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/gvieira/Dropbox/design/Projects/Hare/hare.io/Framer/Project/src_coffee/main.coffee