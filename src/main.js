// Generated by CoffeeScript 1.12.7
(function() {
  var Editor, KeyForCommand, KeyHandler, Parser, SAtom, SExpression, SList, Token, __, _walk, editor, evaluate, inconsolata, key, keyHandler, render, walk,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  __ = require('./utils');

  Parser = require('./parser');

  inconsolata = Utils.loadWebFont("Inconsolata");

  Parser.test();

  SExpression = (function() {
    function SExpression(tokens1, parent1) {
      var sibling;
      this.tokens = tokens1;
      this.parent = parent1;
      this.id = _.uniqueId('sexp_');
      this.children = [];
      this.previous = null;
      this.next = null;
      if (!_.isNil(this.parent)) {
        if (!_.isEmpty(this.parent.children)) {
          sibling = _.last(this.parent.children);
          this.previous = sibling;
          sibling.next = this;
        }
        this.parent.children.push(this);
      }
    }

    SExpression.prototype.toString = function() {
      if (this.tokens != null) {
        return this.tokens.map(function(t) {
          return t.text;
        }).join(' ');
      } else {
        return "NULL";
      }
    };

    SExpression.prototype.select = function(visitedTokenById, siblingIndex, parentIndex) {
      console.log("sel");
      return _.each(this.tokens, function(token) {
        if (!visitedTokenById[token.id]) {
          visitedTokenById[token.id] = true;
          return token.select(siblingIndex, parentIndex);
        }
      });
    };

    SExpression.prototype.deselect = function(visitedTokenById, siblingIndex, parentIndex) {
      console.log("desel");
      return _.each(this.tokens, function(token) {
        if (!visitedTokenById[token.id]) {
          visitedTokenById[token.id] = true;
          return token.deselect();
        }
      });
    };

    return SExpression;

  })();

  SAtom = (function(superClass) {
    extend(SAtom, superClass);

    function SAtom(token, parent) {
      this.isAtom = true;
      this.isList = false;
      SAtom.__super__.constructor.call(this, [token], parent);
    }

    return SAtom;

  })(SExpression);

  SList = (function(superClass) {
    extend(SList, superClass);

    function SList(tokens, parent) {
      this.isAtom = false;
      this.isList = true;
      SList.__super__.constructor.call(this, tokens, parent);
    }

    return SList;

  })(SExpression);

  Token = (function(superClass) {
    extend(Token, superClass);

    Token.prototype.BACKGROUND_COLOR_DESELECTED = '#FFFFFF';

    Token.prototype.TEXT_COLOR_DESELECTED = '#AAA';

    Token.prototype.BACKGROUND_COLOR_SELECTED = '#F8F8F8';

    Token.prototype.TEXT_COLOR_SELECTED = '#000000';

    function Token(txt, x, y) {
      Token.__super__.constructor.call(this, {
        text: txt,
        fontSize: 12,
        fontFamily: inconsolata,
        textAlign: 'center',
        x: x,
        y: y,
        color: this.TEXT_COLOR_DESELECTED,
        backgroundColor: this.BACKGROUND_COLOR_DESELECTED,
        padding: 15
      });
    }

    Token.prototype.select = function(siblingIndex, parentIndex) {
      console.log("select: " + this.text + " (" + siblingIndex + ", " + parentIndex + ")");
      if (siblingIndex === 0 && parentIndex === 0) {
        this.backgroundColor = '#000';
        return this.color = '#FFF';
      } else if (siblingIndex === 0 && parentIndex === -1) {
        this.backgroundColor = '#555';
        this.color = '#AAA';
        return this.fontWeight = 'bold';
      } else if (siblingIndex !== 0 && parentIndex === 0) {
        this.backgroundColor = '#F2F2F2';
        return this.color = '#000';
      } else {
        this.backgroundColor = '#FFF';
        return this.color = '#BBB';
      }
    };

    Token.prototype.deselect = function() {
      this.backgroundColor = this.BACKGROUND_COLOR_DESELECTED;
      return this.color = this.TEXT_COLOR_DESELECTED;
    };

    return Token;

  })(TextLayer);

  evaluate = function(sexp) {
    var args, operator, thing;
    if (!(_.isArray(sexp) && sexp.length > 0)) {
      return sexp;
    }
    operator = _.head(sexp);
    args = _.tail(sexp);
    if (operator === 'quote') {
      if (args.length === 1) {
        return args[0];
      } else {
        return "ERROR: wrong numbers of arguments";
      }
    }
    if (operator === 'atom') {
      if (args.length === 1) {
        thing = evaluate(args[0]);
        if ((_.isArray(thing) && _.isEmpty(thing)) || _.isString(thing)) {
          return 't';
        } else {
          return [];
        }
      } else {
        return "ERROR: wrong numbers of arguments";
      }
    }
  };

  window.evaluate = evaluate;

  render = function(exp, x, y, tokens, parentSExp) {
    var lastToken, leftParens, leftParensIndex, rightParens, slist, str;
    if (_.isString(exp)) {
      str = new Token(exp, x, y);
      tokens.push(str);
      return new SAtom(str, parentSExp);
    } else {
      leftParens = new Token("(", x, y);
      tokens.push(leftParens);
      leftParensIndex = tokens.length - 1;
      slist = new SList([], parentSExp);
      _.each(exp, function(e) {
        var lastToken;
        lastToken = _.last(tokens);
        return render(e, __.xRight(lastToken), y, tokens, slist);
      });
      lastToken = _.last(tokens);
      rightParens = new Token(")", __.xRight(lastToken), y);
      tokens.push(rightParens);
      slist.tokens = tokens.slice(leftParensIndex);
      return slist;
    }
  };

  walk = function(sexp, callback) {
    var visitedSExpressionById, visitedTokenById;
    console.log("walking from: ", sexp.toString());
    visitedSExpressionById = {};
    visitedTokenById = {};
    return _walk(sexp, callback, visitedSExpressionById, visitedTokenById, [0, 0]);
  };

  _walk = function(sexp, callback, visitedSExpressionById, visitedTokenById, indexPair) {
    var nextIndex, parentIndex, previousIndex, siblingIndex, upIndex;
    if (sexp == null) {
      return;
    }
    if (visitedSExpressionById[sexp.id]) {
      return;
    }
    visitedSExpressionById[sexp.id] = true;
    siblingIndex = indexPair[0];
    parentIndex = indexPair[1];
    callback(sexp, visitedTokenById, siblingIndex, parentIndex);
    nextIndex = siblingIndex != null ? siblingIndex + 1 : null;
    previousIndex = siblingIndex != null ? siblingIndex - 1 : null;
    upIndex = parentIndex != null ? parentIndex - 1 : null;
    _walk(sexp.next, callback, visitedSExpressionById, visitedTokenById, [nextIndex, parentIndex]);
    _walk(sexp.previous, callback, visitedSExpressionById, visitedTokenById, [previousIndex, parentIndex]);
    if (sexp.previous == null) {
      return _walk(sexp.parent, callback, visitedSExpressionById, visitedTokenById, [0, upIndex]);
    }
  };

  Editor = (function() {
    function Editor() {
      this.program = ['do', ['let', "'size", '32'], ['let', "'square", ['func', ['x'], ['*', 'x', 'x']]], ['square', 'size']];
      this.rootSExp = render(this.program, 50, 100, []);
      this.currentSExp = null;
      console.log(this.rootSExp);
    }

    Editor.prototype.go = function(dir) {
      var targetSExp;
      targetSExp = _.isNil(this.currentSExp) ? this.rootSExp : {
        next: this.currentSExp.next,
        previous: this.currentSExp.previous,
        "in": _.first(this.currentSExp.children),
        out: this.currentSExp.parent
      }[dir];
      if (targetSExp != null) {
        walk(this.rootSExp, function(sexp, visitedTokenById, siblingIndex, parentIndex) {
          return sexp.deselect(visitedTokenById, siblingIndex, parentIndex);
        });
        this.currentSExp = targetSExp;
        return walk(this.currentSExp, function(sexp, visitedTokenById, siblingIndex, parentIndex) {
          return sexp.select(visitedTokenById, siblingIndex, parentIndex);
        });
      } else if (this.currentSExp === this.rootSExp) {
        walk(this.rootSExp, function(sexp, visitedTokenById, siblingIndex, parentIndex) {
          return sexp.deselect(visitedTokenById, siblingIndex, parentIndex);
        });
        return this.currentSExp = null;
      }
    };

    Editor.prototype.goNext = function() {
      return this.go('next');
    };

    Editor.prototype.goPrevious = function() {
      return this.go('previous');
    };

    Editor.prototype.goIn = function() {
      return this.go('in');
    };

    Editor.prototype.goOut = function() {
      return this.go('out');
    };

    return Editor;

  })();

  editor = new Editor;

  key = {
    h: 72,
    i: 73,
    j: 74,
    k: 75,
    l: 76,
    space: 32,
    enter: 13,
    shift: 16
  };

  KeyForCommand = {
    GO_IN: key.j,
    GO_OUT: key.k,
    GO_PREVIOUS: key.h,
    GO_NEXT: key.l
  };

  KeyHandler = (function() {
    function KeyHandler(editor1) {
      this.editor = editor1;
      this.isDown = {};
      Events.wrap(window).addEventListener('keyup', (function(_this) {
        return function(event) {
          console.log('key up', event.keyCode);
          return delete _this.isDown[event.keyCode];
        };
      })(this));
      Events.wrap(window).addEventListener('keydown', (function(_this) {
        return function(event) {
          console.log('key down', event.keyCode);
          _this.isDown[event.keyCode] = true;
          if (event.keyCode === KeyForCommand.GO_IN) {
            _this.editor.goIn();
          }
          if (event.keyCode === KeyForCommand.GO_OUT) {
            _this.editor.goOut();
          }
          if (event.keyCode === KeyForCommand.GO_NEXT) {
            _this.editor.goNext();
          }
          if (event.keyCode === KeyForCommand.GO_PREVIOUS) {
            return _this.editor.goPrevious();
          }
        };
      })(this));
    }

    return KeyHandler;

  })();

  keyHandler = new KeyHandler(editor);

  console.log('running...');

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIuLiIsInNvdXJjZXMiOlsic3JjX2NvZmZlZS9tYWluLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBR0E7QUFBQSxNQUFBLG9KQUFBO0lBQUE7OztFQUFBLEVBQUEsR0FBSyxPQUFBLENBQVEsU0FBUjs7RUFDTCxNQUFBLEdBQVMsT0FBQSxDQUFRLFVBQVI7O0VBRVQsV0FBQSxHQUFjLEtBQUssQ0FBQyxXQUFOLENBQWtCLGFBQWxCOztFQUVkLE1BQU0sQ0FBQyxJQUFQLENBQUE7O0VBRU07SUFDUyxxQkFBQyxPQUFELEVBQVUsT0FBVjtBQUNYLFVBQUE7TUFEWSxJQUFDLENBQUEsU0FBRDtNQUFTLElBQUMsQ0FBQSxTQUFEO01BQ3JCLElBQUMsQ0FBQSxFQUFELEdBQU0sQ0FBQyxDQUFDLFFBQUYsQ0FBVyxPQUFYO01BQ04sSUFBQyxDQUFBLFFBQUQsR0FBWTtNQUNaLElBQUMsQ0FBQSxRQUFELEdBQVk7TUFDWixJQUFDLENBQUEsSUFBRCxHQUFRO01BQ1IsSUFBRyxDQUFJLENBQUMsQ0FBQyxLQUFGLENBQVEsSUFBQyxDQUFBLE1BQVQsQ0FBUDtRQUNFLElBQUcsQ0FBSSxDQUFDLENBQUMsT0FBRixDQUFVLElBQUMsQ0FBQSxNQUFNLENBQUMsUUFBbEIsQ0FBUDtVQUNFLE9BQUEsR0FBVSxDQUFDLENBQUMsSUFBRixDQUFPLElBQUMsQ0FBQSxNQUFNLENBQUMsUUFBZjtVQUNWLElBQUMsQ0FBQSxRQUFELEdBQVk7VUFDWixPQUFPLENBQUMsSUFBUixHQUFlLEtBSGpCOztRQUlBLElBQUMsQ0FBQSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQWpCLENBQXNCLElBQXRCLEVBTEY7O0lBTFc7OzBCQVdiLFFBQUEsR0FBVSxTQUFBO01BQ1IsSUFBRyxtQkFBSDtlQUFpQixJQUFDLENBQUEsTUFBTSxDQUFDLEdBQVIsQ0FBWSxTQUFDLENBQUQ7aUJBQU8sQ0FBQyxDQUFDO1FBQVQsQ0FBWixDQUEwQixDQUFDLElB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QU0sQ0FBQyxVQUFSLENBQUEsRUFERjs7UUFYOEM7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWhEO0lBTFc7Ozs7OztFQW1CZixVQUFBLEdBQWEsSUFBSSxVQUFKLENBQWUsTUFBZjs7RUFFYixPQUFPLENBQUMsR0FBUixDQUFZLFlBQVo7QUF0T0EiLCJzb3VyY2VzQ29udGVudCI6WyIjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbiMgSW1wb3J0c1xuIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG5fXyA9IHJlcXVpcmUgJy4vdXRpbHMnXG5QYXJzZXIgPSByZXF1aXJlICcuL3BhcnNlcidcblxuaW5jb25zb2xhdGEgPSBVdGlscy5sb2FkV2ViRm9udChcIkluY29uc29sYXRhXCIpXG5cblBhcnNlci50ZXN0KClcblxuY2xhc3MgU0V4cHJlc3Npb25cbiAgY29uc3RydWN0b3I6IChAdG9rZW5zLCBAcGFyZW50KSAtPlxuICAgIEBpZCA9IF8udW5pcXVlSWQoJ3NleHBfJylcbiAgICBAY2hpbGRyZW4gPSBbXVxuICAgIEBwcmV2aW91cyA9IG51bGxcbiAgICBAbmV4dCA9IG51bGxcbiAgICBpZiBub3QgXy5pc05pbChAcGFyZW50KVxuICAgICAgaWYgbm90IF8uaXNFbXB0eShAcGFyZW50LmNoaWxkcmVuKVxuICAgICAgICBzaWJsaW5nID0gXy5sYXN0KEBwYXJlbnQuY2hpbGRyZW4pXG4gICAgICAgIEBwcmV2aW91cyA9IHNpYmxpbmdcbiAgICAgICAgc2libGluZy5uZXh0ID0gdGhpc1xuICAgICAgQHBhcmVudC5jaGlsZHJlbi5wdXNoKHRoaXMpXG4gIHRvU3RyaW5nOiAoKSAtPlxuICAgIGlmIEB0b2tlbnM/IHRoZW4gQHRva2Vucy5tYXAoKHQpIC0+IHQudGV4dCkuam9pbignICcpIGVsc2UgXCJOVUxMXCJcbiAgc2VsZWN0OiAodmlzaXRlZFRva2VuQnlJZCwgc2libGluZ0luZGV4LCBwYXJlbnRJbmRleCkgLT5cbiAgICBjb25zb2xlLmxvZyBcInNlbFwiXG4gICAgXy5lYWNoIEB0b2tlbnMsICh0b2tlbikgLT5cbiAgICAgIGlmIG5vdCB2aXNpdGVkVG9rZW5CeUlkW3Rva2VuLmlkXVxuICAgICAgICB2aXNpdGVkVG9rZW5CeUlkW3Rva2VuLmlkXSA9IHRydWVcbiAgICAgICAgdG9rZW4uc2VsZWN0KHNpYmxpbmdJbmRleCwgcGFyZW50SW5kZXgpXG4gIGRlc2VsZWN0OiAodmlzaXRlZFRva2VuQnlJZCwgc2libGluZ0luZGV4LCBwYXJlbnRJbmRleCkgLT5cbiAgICBjb25zb2xlLmxvZyBcImRlc2VsXCJcbiAgICBfLmVhY2ggQHRva2VucywgKHRva2VuKSAtPlxuICAgICAgaWYgbm90IHZpc2l0ZWRUb2tlbkJ5SWRbdG9rZW4uaWRdXG4gICAgICAgIHZpc2l0ZWRUb2tlbkJ5SWRbdG9rZW4uaWRdID0gdHJ1ZVxuICAgICAgICB0b2tlbi5kZXNlbGVjdCgpXG5cbmNsYXNzIFNBdG9tIGV4dGVuZHMgU0V4cHJlc3Npb25cbiAgY29uc3RydWN0b3I6ICh0b2tlbiwgcGFyZW50KSAtPlxuICAgIEBpc0F0b20gPSB0cnVlXG4gICAgQGlzTGlzdCA9IGZhbHNlXG4gICAgc3VwZXIgW3Rva2VuXSwgcGFyZW50XG5cbmNsYXNzIFNMaXN0IGV4dGVuZHMgU0V4cHJlc3Npb25cbiAgY29uc3RydWN0b3I6ICh0b2tlbnMsIHBhcmVudCkgLT5cbiAgICBAaXNBdG9tID0gZmFsc2VcbiAgICBAaXNMaXN0ID0gdHJ1ZVxuICAgIHN1cGVyIHRva2VucywgcGFyZW50XG5cbmNsYXNzIFRva2VuIGV4dGVuZHMgVGV4dExheWVyXG4gIEJBQ0tHUk9VTkRfQ09MT1JfREVTRUxFQ1RFRDogJyNGRkZGRkYnXG4gIFRFWFRfQ09MT1JfREVTRUxFQ1RFRDogJyNBQUEnXG4gIEJBQ0tHUk9VTkRfQ09MT1JfU0VMRUNURUQ6ICcjRjhGOEY4J1xuICBURVhUX0NPTE9SX1NFTEVDVEVEOiAnIzAwMDAwMCdcbiAgY29uc3RydWN0b3I6ICh0eHQsIHgsIHkpIC0+XG4gICAgc3VwZXJcbiAgICAgIHRleHQ6IHR4dFxuICAgICAgZm9udFNpemU6IDEyXG4gICAgICBmb250RmFtaWx5OiBpbmNvbnNvbGF0YVxuICAgICAgdGV4dEFsaWduOiAnY2VudGVyJ1xuICAgICAgeDogeFxuICAgICAgeTogeVxuICAgICAgY29sb3I6IEBURVhUX0NPTE9SX0RFU0VMRUNURURcbiAgICAgIGJhY2tncm91bmRDb2xvcjogQEJBQ0tHUk9VTkRfQ09MT1JfREVTRUxFQ1RFRFxuICAgICAgcGFkZGluZzogMTVcbiAgc2VsZWN0OiAoc2libGluZ0luZGV4LCBwYXJlbnRJbmRleCkgLT5cbiAgICBjb25zb2xlLmxvZyBcInNlbGVjdDogI3tAdGV4dH0gKCN7c2libGluZ0luZGV4fSwgI3twYXJlbnRJbmRleH0pXCJcbiAgICBpZiBzaWJsaW5nSW5kZXggPT0gMCAmJiBwYXJlbnRJbmRleCA9PSAwXG4gICAgICBAYmFja2dyb3VuZENvbG9yID0gJyMwMDAnXG4gICAgICBAY29sb3IgPSAnI0ZGRidcbiAgICBlbHNlIGlmIHNpYmxpbmdJbmRleCA9PSAwICYmIHBhcmVudEluZGV4ID09IC0xXG4gICAgICBAYmFja2dyb3VuZENvbG9yID0gJyM1NTUnXG4gICAgICBAY29sb3IgPSAnI0FBQSdcbiAgICAgIEBmb250V2VpZ2h0ID0gJ2JvbGQnXG4gICAgZWxzZSBpZiBzaWJsaW5nSW5kZXggIT0gMCAmJiBwYXJlbnRJbmRleCA9PSAwXG4gICAgICBAYmFja2dyb3VuZENvbG9yID0gJyNGMkYyRjInXG4gICAgICBAY29sb3IgPSAnIzAwMCdcbiAgICBlbHNlXG4gICAgICBAYmFja2dyb3VuZENvbG9yID0gJyNGRkYnXG4gICAgICBAY29sb3IgPSAnI0JCQidcbiAgZGVzZWxlY3Q6ICgpIC0+XG4gICAgQGJhY2tncm91bmRDb2xvciA9IEBCQUNLR1JPVU5EX0NPTE9SX0RFU0VMRUNURURcbiAgICBAY29sb3IgPSBAVEVYVF9DT0xPUl9ERVNFTEVDVEVEXG5cbiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4jIEVWQUxVQVRFXG4jIHdvcmsgaW4gcHJvZ3Jlc3NcbmV2YWx1YXRlID0gKHNleHApIC0+XG4gIHJldHVybiBzZXhwIHVubGVzcyBfLmlzQXJyYXkoc2V4cCkgJiYgc2V4cC5sZW5ndGggPiAwXG4gIG9wZXJhdG9yID0gXy5oZWFkKHNleHApXG4gIGFyZ3MgPSBfLnRhaWwoc2V4cClcbiAgaWYgb3BlcmF0b3IgaXMgJ3F1b3RlJ1xuICAgIGlmIGFyZ3MubGVuZ3RoID09IDFcbiAgICAgIHJldHVybiBhcmdzWzBdXG4gICAgZWxzZVxuICAgICAgcmV0dXJuIFwiRVJST1I6IHdyb25nIG51bWJlcnMgb2YgYXJndW1lbnRzXCJcbiAgaWYgb3BlcmF0b3IgaXMgJ2F0b20nXG4gICAgaWYgYXJncy5sZW5ndGggPT0gMVxuICAgICAgdGhpbmcgPSBldmFsdWF0ZShhcmdzWzBdKVxuICAgICAgcmV0dXJuIGlmIChfLmlzQXJyYXkodGhpbmcpIGFuZCBfLmlzRW1wdHkodGhpbmcpKSBvciBfLmlzU3RyaW5nKHRoaW5nKSB0aGVuICd0JyBlbHNlIFtdXG4gICAgZWxzZVxuICAgICAgcmV0dXJuIFwiRVJST1I6IHdyb25nIG51bWJlcnMgb2YgYXJndW1lbnRzXCJcblxud2luZG93LmV2YWx1YXRlID0gZXZhbHVhdGVcblxuIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbiMgUkVOREVSXG5yZW5kZXIgPSAoZXhwLCB4LCB5LCB0b2tlbnMsIHBhcmVudFNFeHApIC0+XG4gIGlmIF8uaXNTdHJpbmcoZXhwKVxuICAgIHN0ciA9IG5ldyBUb2tlbihleHAsIHgsIHkpXG4gICAgdG9rZW5zLnB1c2goc3RyKVxuICAgIHJldHVybiBuZXcgU0F0b20oc3RyLCBwYXJlbnRTRXhwKVxuICBlbHNlXG4gICAgbGVmdFBhcmVucyA9IG5ldyBUb2tlbihcIihcIiwgeCwgeSlcbiAgICB0b2tlbnMucHVzaChsZWZ0UGFyZW5zKVxuICAgIGxlZnRQYXJlbnNJbmRleCA9IHRva2Vucy5sZW5ndGggLSAxXG4gICAgc2xpc3QgPSBuZXcgU0xpc3QoW10sIHBhcmVudFNFeHApXG4gICAgXy5lYWNoIGV4cCwgKGUpIC0+XG4gICAgICBsYXN0VG9rZW4gPSBfLmxhc3QodG9rZW5zKVxuICAgICAgcmVuZGVyKGUsIF9fLnhSaWdodChsYXN0VG9rZW4pLCB5LCB0b2tlbnMsIHNsaXN0KVxuICAgIGxhc3RUb2tlbiA9IF8ubGFzdCh0b2tlbnMpXG4gICAgcmlnaHRQYXJlbnMgPSBuZXcgVG9rZW4oXCIpXCIsIF9fLnhSaWdodChsYXN0VG9rZW4pLCB5KVxuICAgIHRva2Vucy5wdXNoKHJpZ2h0UGFyZW5zKVxuICAgIHNsaXN0LnRva2VucyA9IHRva2Vucy5zbGljZShsZWZ0UGFyZW5zSW5kZXgpXG4gICAgcmV0dXJuIHNsaXN0XG5cbiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4jIFdBTEtcbndhbGsgPSAoc2V4cCwgY2FsbGJhY2spIC0+XG4gIGNvbnNvbGUubG9nIFwid2Fsa2luZyBmcm9tOiBcIiwgc2V4cC50b1N0cmluZygpXG4gIHZpc2l0ZWRTRXhwcmVzc2lvbkJ5SWQgPSB7fVxuICB2aXNpdGVkVG9rZW5CeUlkID0ge31cbiAgX3dhbGsoc2V4cCwgY2FsbGJhY2ssIHZpc2l0ZWRTRXhwcmVzc2lvbkJ5SWQsIHZpc2l0ZWRUb2tlbkJ5SWQsIFswLCAwXSlcblxuX3dhbGsgPSAoc2V4cCwgY2FsbGJhY2ssIHZpc2l0ZWRTRXhwcmVzc2lvbkJ5SWQsIHZpc2l0ZWRUb2tlbkJ5SWQsIGluZGV4UGFpcikgLT5cbiAgcmV0dXJuIHVubGVzcyBzZXhwP1xuICByZXR1cm4gaWYgdmlzaXRlZFNFeHByZXNzaW9uQnlJZFtzZXhwLmlkXVxuICB2aXNpdGVkU0V4cHJlc3Npb25CeUlkW3NleHAuaWRdID0gdHJ1ZVxuICBzaWJsaW5nSW5kZXggPSBpbmRleFBhaXJbMF1cbiAgcGFyZW50SW5kZXggPSBpbmRleFBhaXJbMV1cbiAgY2FsbGJhY2soc2V4cCwgdmlzaXRlZFRva2VuQnlJZCwgc2libGluZ0luZGV4LCBwYXJlbnRJbmRleClcbiAgbmV4dEluZGV4ID0gaWYgc2libGluZ0luZGV4PyB0aGVuIHNpYmxpbmdJbmRleCArIDEgZWxzZSBudWxsXG4gIHByZXZpb3VzSW5kZXggPSBpZiBzaWJsaW5nSW5kZXg/IHRoZW4gc2libGluZ0luZGV4IC0gMSBlbHNlIG51bGxcbiAgdXBJbmRleCA9IGlmIHBhcmVudEluZGV4PyB0aGVuIHBhcmVudEluZGV4IC0gMSBlbHNlIG51bGxcbiAgIyBkb3duSW5kZXggPSBpZiBwYXJlbnRJbmRleD8gdGhlbiBwYXJlbnRJbmRleCArIDEgZWxzZSBudWxsXG4gIF93YWxrKHNleHAubmV4dCwgY2FsbGJhY2ssIHZpc2l0ZWRTRXhwcmVzc2lvbkJ5SWQsIHZpc2l0ZWRUb2tlbkJ5SWQsIFtuZXh0SW5kZXgsIHBhcmVudEluZGV4XSlcbiAgX3dhbGsoc2V4cC5wcmV2aW91cywgY2FsbGJhY2ssIHZpc2l0ZWRTRXhwcmVzc2lvbkJ5SWQsIHZpc2l0ZWRUb2tlbkJ5SWQsIFtwcmV2aW91c0luZGV4LCBwYXJlbnRJbmRleF0pXG4gIGlmIG5vdCBzZXhwLnByZXZpb3VzP1xuICAgIF93YWxrKHNleHAucGFyZW50LCBjYWxsYmFjaywgdmlzaXRlZFNFeHByZXNzaW9uQnlJZCwgdmlzaXRlZFRva2VuQnlJZCwgWzAsIHVwSW5kZXhdKVxuICAjIF93YWxrKF8uZmlyc3Qoc2V4cC5jaGlsZHJlbiksIGNhbGxiYWNrLCB2aXNpdGVkLCBbbnVsbCwgZG93bkluZGV4XSlcblxuIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbiMgRURJVE9SXG5jbGFzcyBFZGl0b3JcbiAgY29uc3RydWN0b3I6ICgpIC0+XG4gICAgQHByb2dyYW0gPSBbXG4gICAgICAnZG8nLFxuICAgICAgWydsZXQnLCBcIidzaXplXCIsICczMiddLFxuICAgICAgWydsZXQnLCBcIidzcXVhcmVcIixcbiAgICAgICAgWydmdW5jJywgWyd4J10sIFsnKicsICd4JywgJ3gnXV1dLFxuICAgICAgWydzcXVhcmUnLCAnc2l6ZSddXG4gICAgXVxuICAgIEByb290U0V4cCA9IHJlbmRlciBAcHJvZ3JhbSwgNTAsIDEwMCwgW11cbiAgICBAY3VycmVudFNFeHAgPSBudWxsXG4gICAgY29uc29sZS5sb2coQHJvb3RTRXhwKVxuICBnbzogKGRpcikgLT5cbiAgICB0YXJnZXRTRXhwID0gaWYgXy5pc05pbChAY3VycmVudFNFeHApXG4gICAgICBAcm9vdFNFeHBcbiAgICBlbHNlXG4gICAgICB7XG4gICAgICAgIG5leHQ6IEBjdXJyZW50U0V4cC5uZXh0XG4gICAgICAgIHByZXZpb3VzOiBAY3VycmVudFNFeHAucHJldmlvdXNcbiAgICAgICAgaW46IF8uZmlyc3QoQGN1cnJlbnRTRXhwLmNoaWxkcmVuKVxuICAgICAgICBvdXQ6IEBjdXJyZW50U0V4cC5wYXJlbnRcbiAgICAgIH1bZGlyXVxuICAgIGlmIHRhcmdldFNFeHA/XG4gICAgICB3YWxrIEByb290U0V4cCwgKHNleHAsIHZpc2l0ZWRUb2tlbkJ5SWQsIHNpYmxpbmdJbmRleCwgcGFyZW50SW5kZXgpIC0+IHNleHAuZGVzZWxlY3QodmlzaXRlZFRva2VuQnlJZCwgc2libGluZ0luZGV4LCBwYXJlbnRJbmRleClcbiAgICAgIEBjdXJyZW50U0V4cCA9IHRhcmdldFNFeHBcbiAgICAgIHdhbGsgQGN1cnJlbnRTRXhwLCAoc2V4cCwgdmlzaXRlZFRva2VuQnlJZCwgc2libGluZ0luZGV4LCBwYXJlbnRJbmRleCkgLT4gc2V4cC5zZWxlY3QodmlzaXRlZFRva2VuQnlJZCwgc2libGluZ0luZGV4LCBwYXJlbnRJbmRleClcbiAgICBlbHNlIGlmIEBjdXJyZW50U0V4cCA9PSBAcm9vdFNFeHBcbiAgICAgIHdhbGsgQHJvb3RTRXhwLCAoc2V4cCwgdmlzaXRlZFRva2VuQnlJZCwgc2libGluZ0luZGV4LCBwYXJlbnRJbmRleCkgLT4gc2V4cC5kZXNlbGVjdCh2aXNpdGVkVG9rZW5CeUlkLCBzaWJsaW5nSW5kZXgsIHBhcmVudEluZGV4KVxuICAgICAgQGN1cnJlbnRTRXhwID0gbnVsbFxuICBnb05leHQ6ICgpIC0+XG4gICAgQGdvKCduZXh0JylcbiAgZ29QcmV2aW91czogKCkgLT5cbiAgICBAZ28oJ3ByZXZpb3VzJylcbiAgZ29JbjogKCkgLT5cbiAgICBAZ28oJ2luJylcbiAgZ29PdXQ6ICgpIC0+XG4gICAgQGdvKCdvdXQnKVxuXG5lZGl0b3IgPSBuZXcgRWRpdG9yXG5cbiMgZWRpdG9yLmdvSW4oKVxuXG5rZXkgPVxuICBoOiA3MlxuICBpOiA3M1xuICBqOiA3NFxuICBrOiA3NVxuICBsOiA3NlxuICBzcGFjZTogMzJcbiAgZW50ZXI6IDEzXG4gIHNoaWZ0OiAxNlxuXG5LZXlGb3JDb21tYW5kID1cbiAgR09fSU46IGtleS5qXG4gIEdPX09VVDoga2V5LmtcbiAgR09fUFJFVklPVVM6IGtleS5oXG4gIEdPX05FWFQ6IGtleS5sXG5cbmNsYXNzIEtleUhhbmRsZXJcbiAgY29uc3RydWN0b3I6IChAZWRpdG9yKSAtPlxuICAgIEBpc0Rvd24gPSB7fVxuICAgIEV2ZW50cy53cmFwKHdpbmRvdykuYWRkRXZlbnRMaXN0ZW5lciAna2V5dXAnLCAoZXZlbnQpID0+XG4gICAgICBjb25zb2xlLmxvZyAna2V5IHVwJywgZXZlbnQua2V5Q29kZVxuICAgICAgZGVsZXRlIEBpc0Rvd25bZXZlbnQua2V5Q29kZV1cbiAgICBFdmVudHMud3JhcCh3aW5kb3cpLmFkZEV2ZW50TGlzdGVuZXIgJ2tleWRvd24nLCAoZXZlbnQpID0+XG4gICAgICBjb25zb2xlLmxvZyAna2V5IGRvd24nLCBldmVudC5rZXlDb2RlXG4gICAgICBAaXNEb3duW2V2ZW50LmtleUNvZGVdID0gdHJ1ZVxuICAgICMgRXZlbnRzLndyYXAod2luZG93KS5hZGRFdmVudExpc3RlbmVyICdrZXlwcmVzcycsIChldmVudCkgPT5cbiAgICAjICAgY29uc29sZS5sb2cgJ2tleSBwcmVzcycsIGV2ZW50LmtleUNvZGVcbiAgICAgIGlmIGV2ZW50LmtleUNvZGUgaXMgS2V5Rm9yQ29tbWFuZC5HT19JTlxuICAgICAgICBAZWRpdG9yLmdvSW4oKVxuICAgICAgaWYgZXZlbnQua2V5Q29kZSBpcyBLZXlGb3JDb21tYW5kLkdPX09VVFxuICAgICAgICBAZWRpdG9yLmdvT3V0KClcbiAgICAgIGlmIGV2ZW50LmtleUNvZGUgaXMgS2V5Rm9yQ29tbWFuZC5HT19ORVhUXG4gICAgICAgIEBlZGl0b3IuZ29OZXh0KClcbiAgICAgIGlmIGV2ZW50LmtleUNvZGUgaXMgS2V5Rm9yQ29tbWFuZC5HT19QUkVWSU9VU1xuICAgICAgICBAZWRpdG9yLmdvUHJldmlvdXMoKVxuXG5rZXlIYW5kbGVyID0gbmV3IEtleUhhbmRsZXIoZWRpdG9yKVxuXG5jb25zb2xlLmxvZyAncnVubmluZy4uLidcbiJdfQ==
//# sourceURL=/Users/gvieira/Dropbox/design/Projects/Hare/hare.io/Framer/Project/src_coffee/main.coffee