// Generated by CoffeeScript 1.12.7
(function() {
  var Atom, Context, Expression, List, StringParser, StringRenderer,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Expression = (function() {
    function Expression(id1, context1) {
      this.id = id1;
      this.context = context1;
      this.context.add(this);
      this.is_list = false;
      this.is_atom = false;
    }

    return Expression;

  })();

  Atom = (function(superClass) {
    extend(Atom, superClass);

    function Atom(string1, context1) {
      this.string = string1;
      this.context = context1;
      this.id = _.uniqueId('Atom_');
      Atom.__super__.constructor.call(this, this.id, this.context);
      this.is_atom = true;
    }

    Atom.prototype.to_s = function() {
      return this.string;
    };

    return Atom;

  })(Expression);

  List = (function(superClass) {
    extend(List, superClass);

    function List(context1) {
      this.context = context1;
      this.id = _.uniqueId('List_');
      List.__super__.constructor.call(this, this.id, this.context);
      this.is_list = true;
    }

    return List;

  })(Expression);

  Context = (function() {
    function Context() {
      this.expression_by_id = [];
      this.root_id = null;
      this.cursor_id = null;
      this.parent_of = {};
      this.children_of = {};
      this.previous_of = {};
      this.next_of = {};
    }

    Context.prototype.get = function(id) {
      return this.expression_by_id[id];
    };

    Context.prototype.add = function(exp) {
      return this.expression_by_id[exp.id] = exp;
    };

    Context.prototype.children = function(exp) {
      if (_.isUndefined(this.children_of[exp.id])) {
        this.children_of[exp.id] = [];
      }
      return this.children_of[exp.id];
    };

    Context.prototype.push = function(list, exp) {
      var before_exp;
      this.parent_of[exp.id] = list.id;
      if (_.isUndefined(this.children_of[list.id])) {
        this.children_of[list.id] = [];
      }
      this.children_of[list.id].push(exp.id);
      if (this.children_of[list.id].length > 1) {
        before_exp = _.last(_.dropRight(this.children_of[list.id]));
        this.previous_of[exp.id] = before_exp.id;
        return this.next_of[before_exp.id] = exp.id;
      }
    };

    return Context;

  })();

  StringParser = (function() {
    function StringParser(context1, string1) {
      this.context = context1;
      this.string = string1;
    }

    StringParser.prototype.tokenize = function(string) {
      return string.replace(/\(/g, "( ").replace(/\)/g, " )").split(" ").filter(function(str) {
        return str !== "";
      });
    };

    StringParser.prototype.readFrom = function(tokens, context) {
      var list, token;
      if (_.isEmpty(tokens)) {
        throw new SyntaxError("unexpected EOF while reading");
      }
      token = tokens.shift();
      if (token === "(") {
        list = new List(context);
        while (tokens[0] !== ")") {
          this.context.push(list, this.readFrom(tokens, context));
        }
        tokens.shift();
        return list;
      } else if (token === ")") {
        throw new SyntaxError("unexpected )");
      } else {
        return new Atom(token, context);
      }
    };

    StringParser.prototype.parse = function() {
      var exp;
      exp = this.readFrom(this.tokenize(this.string), this.context);
      return this.context.root_id = exp.id;
    };

    return StringParser;

  })();

  StringRenderer = (function() {
    function StringRenderer(context1, root_id) {
      this.context = context1;
      this.root_id = root_id;
    }

    StringRenderer.prototype.render = function() {
      var exp;
      exp = this.context.get(this.root_id);
      return this._render(exp);
    };

    StringRenderer.prototype._render = function(exp) {
      var children;
      if (exp.is_atom) {
        return exp.to_s();
      } else {
        return children = this.context.children(exp);
      }
    };

    return StringRenderer;

  })();

  module.exports = {
    Expression: Expression,
    List: List,
    Atom: Atom,
    Context: Context,
    StringParser: StringParser,
    StringRenderer: StringRenderer
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFyZS5qcyIsInNvdXJjZVJvb3QiOiIuLiIsInNvdXJjZXMiOlsic3JjX2NvZmZlZS9oYXJlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFBQSxNQUFBLDZEQUFBO0lBQUE7OztFQUFNO0lBQ1Msb0JBQUMsR0FBRCxFQUFNLFFBQU47TUFBQyxJQUFDLENBQUEsS0FBRDtNQUFLLElBQUMsQ0FBQSxVQUFEO01BQ2pCLElBQUMsQ0FBQSxPQUFPLENBQUMsR0FBVCxDQUFhLElBQWI7TUFDQSxJQUFDLENBQUEsT0FBRCxHQUFXO01BQ1gsSUFBQyxDQUFBLE9BQUQsR0FBVztJQUhBOzs7Ozs7RUFLVDs7O0lBQ1MsY0FBQyxPQUFELEVBQVUsUUFBVjtNQUFDLElBQUMsQ0FBQSxTQUFEO01BQVMsSUFBQyxDQUFBLFVBQUQ7TUFDckIsSUFBQyxDQUFBLEVBQUQsR0FBTSxDQUFDLENBQUMsUUFBRixDQUFXLE9BQVg7TUFDTixzQ0FBTSxJQUFDLENBQUEsRUFBUCxFQUFXLElBQUMsQ0FBQSxPQUFaO01BQ0EsSUFBQyxDQUFBLE9BQUQsR0FBVztJQUhBOzttQkFJYixJQUFBLEdBQU0sU0FBQTthQUNKLElBQUMsQ0FBQTtJQURHOzs7O0tBTFc7O0VBUWI7OztJQUNTLGNBQUMsUUFBRDtNQUFDLElBQUMsQ0FBQSxVQUFEO01BQ1osSUFBQyxDQUFBLEVBQUQsR0FBTSxDQUFDLENBQUMsUUFBRixDQUFXLE9BQVg7TUFDTixzQ0FBTSxJQUFDLENBQUEsRUFBUCxFQUFXLElBQUMsQ0FBQSxPQUFaO01BQ0EsSUFBQyxDQUFBLE9BQUQsR0FBVztJQUhBOzs7O0tBREk7O0VBTWI7SUFDUyxpQkFBQTtNQUNYLElBQUMsQ0FBQSxnQkFBRCxHQUFvQjtNQUNwQixJQUFDLENBQUEsT0FBRCxHQUFXO01BQ1gsSUFBQyxDQUFBLFNBQUQsR0FBYTtNQUNiLElBQUMsQ0FBQSxTQUFELEdBQWE7TUFDYixJQUFDLENBQUEsV0FBRCxHQUFlO01BQ2YsSUFBQyxDQUFBLFdBQUQsR0FBZTtNQUNmLElBQUMsQ0FBQSxPQUFELEdBQVc7SUFQQTs7c0JBUWIsR0FBQSxHQUFLLFNBQUMsRUFBRDthQUNILElBQUMsQ0FBQSxnQkFBaUIsQ0FBQSxFQUFBO0lBRGY7O3NCQUVMLEdBQUEsR0FBSyxTQUFDLEdBQUQ7YUFDSCxJQUFDLENBQUEsZ0JBQWlCLENBQUEsR0FBRyxDQUFDLEVBQUosQ0FBbEIsR0FBNEI7SUFEekI7O3NCQUVMLFFBQUEsR0FBVSxTQUFDLEdBQUQ7TUFDUixJQUFHLENBQUMsQ0FBQyxXQUFGLENBQWMsSUFBQyxDQUFBLFdBQVksQ0FBQSxHQUFHLENBQUMsRUFBSixDQUEzQixDQUFIO1FBQ0UsSUFBQyxDQUFBLFdBQVksQ0FBQSxHQUFHLENBQUMsRUFBSixDQUFiLEdBQXVCLEdBRHpCOzthQUVBLElBQUMsQ0FBQSxXQUFZLENBQUEsR0FBRyxDQUFDLEVBQUo7SUFITDs7c0JBSVYsSUFBQSxHQUFNLFNBQUMsSUFBRCxFQUFPLEdBQVA7QUFDSixVQUFBO01BQUEsSUFBQyxDQUFBLFNBQVUsQ0FBQSxHQUFHLENBQUMsRUFBSixDQUFYLEdBQXFCLElBQUksQ0FBQztNQUMxQixJQUE4QixDQUFDLENBQUMsV0FBRixDQUFjLElBQUMsQ0FBQSxXQUFZLENBQUEsSUFBSSxDQUFDLEVBQUwsQ0FBM0IsQ0FBOUI7UUFBQSxJQUFDLENBQUEsV0FBWSxDQUFBLElBQUksQ0FBQyxFQUFMLENBQWIsR0FBd0IsR0FBeEI7O01BQ0EsSUFBQyxDQUFBLFdBQVksQ0FBQSxJQUFJLENBQUMsRUFBTCxDQUFRLENBQUMsSUFBdEIsQ0FBMkIsR0FBRyxDQUFDLEVBQS9CO01BQ0EsSUFBRyxJQUFDLENBQUEsV0FBWSxDQUFBLElBQUksQ0FBQyxFQUFMLENBQVEsQ0FBQyxNQUF0QixHQUErQixDQUFsQztRQUNFLFVBQUEsR0FBYSxDQUFDLENBQUMsSUFBRixDQUFPLENBQUMsQ0FBQyxTQUFGLENBQVksSUFBQyxDQUFBLFdBQVksQ0FBQSxJQUFJLENBQUMsRUFBTCxDQUF6QixDQUFQO1FBQ2IsSUFBQyxDQUFBLFdBQVksQ0FBQSxHQUFHLENBQUMsRUFBSixDQUFiLEdBQXVCLFVBQVUsQ0FBQztlQUNsQyxJQUFDLENBQUEsT0FBUSxDQUFBLFVBQVUsQ0FBQyxFQUFYLENBQVQsR0FBMEIsR0FBRyxDQUFDLEdBSGhDOztJQUpJOzs7Ozs7RUFTRjtJQUNTLHNCQUFDLFFBQUQsRUFBVyxPQUFYO01BQUMsSUFBQyxDQUFBLFVBQUQ7TUFBVSxJQUFDLENBQUEsU0FBRDtJQUFYOzsyQkFDYixRQUFBLEdBQVUsU0FBQyxNQUFEO2FBR1IsTUFBTSxDQUFDLE9BQVAsQ0FBZSxLQUFmLEVBQXNCLElBQXRCLENBQTJCLENBQUMsT0FBNUIsQ0FBb0MsS0FBcEMsRUFBMkMsSUFBM0MsQ0FBZ0QsQ0FBQyxLQUFqRCxDQUF1RCxHQUF2RCxDQUEyRCxDQUFDLE1BQTVELENBQW1FLFNBQUMsR0FBRDtlQUFTLEdBQUEsS0FBUztNQUFsQixDQUFuRTtJQUhROzsyQkFJVixRQUFBLEdBQVUsU0FBQyxNQUFELEVBQVMsT0FBVDtBQUNSLFVBQUE7TUFBQSxJQUF5RCxDQUFDLENBQUMsT0FBRixDQUFVLE1BQVYsQ0FBekQ7QUFBQSxjQUFNLElBQUksV0FBSixDQUFnQiw4QkFBaEIsRUFBTjs7TUFDQSxLQUFBLEdBQVEsTUFBTSxDQUFDLEtBQVAsQ0FBQTtNQUNSLElBQUcsS0FBQSxLQUFTLEdBQVo7UUFDRSxJQUFBLEdBQU8sSUFBSSxJQUFKLENBQVMsT0FBVDtBQUNQLGVBQU0sTUFBTyxDQUFBLENBQUEsQ0FBUCxLQUFlLEdBQXJCO1VBQ0UsSUFBQyxDQUFBLE9BQU8sQ0FBQyxJQUFULENBQWMsSUFBZCxFQUFvQixJQUFDLENBQUEsUUFBRCxDQUFVLE1BQVYsRUFBa0IsT0FBbEIsQ0FBcEI7UUFERjtRQUVBLE1BQU0sQ0FBQyxLQUFQLENBQUE7QUFDQSxlQUFPLEtBTFQ7T0FBQSxNQU1LLElBQUcsS0FBQSxLQUFTLEdBQVo7QUFDSCxjQUFNLElBQUksV0FBSixDQUFnQixjQUFoQixFQURIO09BQUEsTUFBQTtBQUdILGVBQU8sSUFBSSxJQUFKLENBQVMsS0FBVCxFQUFnQixPQUFoQixFQUhKOztJQVRHOzsyQkFhVixLQUFBLEdBQU8sU0FBQTtBQUNMLFVBQUE7TUFBQSxHQUFBLEdBQU0sSUFBQyxDQUFBLFFBQUQsQ0FBVSxJQUFDLENBQUEsUUFBRCxDQUFVLElBQUMsQ0FBQSxNQUFYLENBQVYsRUFBOEIsSUFBQyxDQUFBLE9BQS9CO2FBQ04sSUFBQyxDQUFBLE9BQU8sQ0FBQyxPQUFULEdBQW1CLEdBQUcsQ0FBQztJQUZsQjs7Ozs7O0VBSUg7SUFDUyx3QkFBQyxRQUFELEVBQVcsT0FBWDtNQUFDLElBQUMsQ0FBQSxVQUFEO01BQVUsSUFBQyxDQUFBLFVBQUQ7SUFBWDs7NkJBQ2IsTUFBQSxHQUFRLFNBQUE7QUFDTixVQUFBO01BQUEsR0FBQSxHQUFNLElBQUMsQ0FBQSxPQUFPLENBQUMsR0FBVCxDQUFhLElBQUMsQ0FBQSxPQUFkO2FBQ04sSUFBQyxDQUFBLE9BQUQsQ0FBUyxHQUFUO0lBRk07OzZCQUdSLE9BQUEsR0FBUyxTQUFDLEdBQUQ7QUFDUCxVQUFBO01BQUEsSUFBRyxHQUFHLENBQUMsT0FBUDtlQUNFLEdBQUcsQ0FBQyxJQUFKLENBQUEsRUFERjtPQUFBLE1BQUE7ZUFHRSxRQUFBLEdBQVcsSUFBQyxDQUFBLE9BQU8sQ0FBQyxRQUFULENBQWtCLEdBQWxCLEVBSGI7O0lBRE87Ozs7OztFQU1YLE1BQU0sQ0FBQyxPQUFQLEdBQ0U7SUFBQSxVQUFBLEVBQVksVUFBWjtJQUNBLElBQUEsRUFBTSxJQUROO0lBRUEsSUFBQSxFQUFNLElBRk47SUFHQSxPQUFBLEVBQVMsT0FIVDtJQUlBLFlBQUEsRUFBYyxZQUpkO0lBS0EsY0FBQSxFQUFnQixjQUxoQjs7QUFqRkYiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBFeHByZXNzaW9uXG4gIGNvbnN0cnVjdG9yOiAoQGlkLCBAY29udGV4dCkgLT5cbiAgICBAY29udGV4dC5hZGQodGhpcylcbiAgICBAaXNfbGlzdCA9IGZhbHNlXG4gICAgQGlzX2F0b20gPSBmYWxzZVxuXG5jbGFzcyBBdG9tIGV4dGVuZHMgRXhwcmVzc2lvblxuICBjb25zdHJ1Y3RvcjogKEBzdHJpbmcsIEBjb250ZXh0KSAtPlxuICAgIEBpZCA9IF8udW5pcXVlSWQoJ0F0b21fJylcbiAgICBzdXBlciBAaWQsIEBjb250ZXh0XG4gICAgQGlzX2F0b20gPSB0cnVlXG4gIHRvX3M6ICgpIC0+XG4gICAgQHN0cmluZ1xuXG5jbGFzcyBMaXN0IGV4dGVuZHMgRXhwcmVzc2lvblxuICBjb25zdHJ1Y3RvcjogKEBjb250ZXh0KSAtPlxuICAgIEBpZCA9IF8udW5pcXVlSWQoJ0xpc3RfJylcbiAgICBzdXBlciBAaWQsIEBjb250ZXh0XG4gICAgQGlzX2xpc3QgPSB0cnVlXG5cbmNsYXNzIENvbnRleHRcbiAgY29uc3RydWN0b3I6ICgpIC0+XG4gICAgQGV4cHJlc3Npb25fYnlfaWQgPSBbXVxuICAgIEByb290X2lkID0gbnVsbFxuICAgIEBjdXJzb3JfaWQgPSBudWxsXG4gICAgQHBhcmVudF9vZiA9IHt9XG4gICAgQGNoaWxkcmVuX29mID0ge31cbiAgICBAcHJldmlvdXNfb2YgPSB7fVxuICAgIEBuZXh0X29mID0ge31cbiAgZ2V0OiAoaWQpIC0+XG4gICAgQGV4cHJlc3Npb25fYnlfaWRbaWRdXG4gIGFkZDogKGV4cCkgLT5cbiAgICBAZXhwcmVzc2lvbl9ieV9pZFtleHAuaWRdID0gZXhwXG4gIGNoaWxkcmVuOiAoZXhwKSAtPlxuICAgIGlmIF8uaXNVbmRlZmluZWQoQGNoaWxkcmVuX29mW2V4cC5pZF0pXG4gICAgICBAY2hpbGRyZW5fb2ZbZXhwLmlkXSA9IFtdXG4gICAgQGNoaWxkcmVuX29mW2V4cC5pZF1cbiAgcHVzaDogKGxpc3QsIGV4cCkgLT5cbiAgICBAcGFyZW50X29mW2V4cC5pZF0gPSBsaXN0LmlkXG4gICAgQGNoaWxkcmVuX29mW2xpc3QuaWRdID0gW10gaWYgXy5pc1VuZGVmaW5lZChAY2hpbGRyZW5fb2ZbbGlzdC5pZF0pXG4gICAgQGNoaWxkcmVuX29mW2xpc3QuaWRdLnB1c2goZXhwLmlkKVxuICAgIGlmIEBjaGlsZHJlbl9vZltsaXN0LmlkXS5sZW5ndGggPiAxXG4gICAgICBiZWZvcmVfZXhwID0gXy5sYXN0KF8uZHJvcFJpZ2h0KEBjaGlsZHJlbl9vZltsaXN0LmlkXSkpXG4gICAgICBAcHJldmlvdXNfb2ZbZXhwLmlkXSA9IGJlZm9yZV9leHAuaWRcbiAgICAgIEBuZXh0X29mW2JlZm9yZV9leHAuaWRdID0gZXhwLmlkXG5cbmNsYXNzIFN0cmluZ1BhcnNlclxuICBjb25zdHJ1Y3RvcjogKEBjb250ZXh0LCBAc3RyaW5nKSAtPlxuICB0b2tlbml6ZTogKHN0cmluZykgLT5cbiAgICAjIGlucHV0IC0+ICcoZm4gKHMpICgrIFwiaGVsbG8gXCIgcykpJ1xuICAgICMgb3V0cHV0IC0+IFsnKCcsICdmbicsICcoJywgJ3MnLCAnKScsICcoJywgJ1wiaGVsbG8nLCAnXCInLCAncycsICcpJ11cbiAgICBzdHJpbmcucmVwbGFjZSgvXFwoL2csIFwiKCBcIikucmVwbGFjZSgvXFwpL2csIFwiIClcIikuc3BsaXQoXCIgXCIpLmZpbHRlciAoc3RyKSAtPiBzdHIgaXNudCBcIlwiXG4gIHJlYWRGcm9tOiAodG9rZW5zLCBjb250ZXh0KSAtPlxuICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihcInVuZXhwZWN0ZWQgRU9GIHdoaWxlIHJlYWRpbmdcIikgaWYgXy5pc0VtcHR5KHRva2VucylcbiAgICB0b2tlbiA9IHRva2Vucy5zaGlmdCgpXG4gICAgaWYgdG9rZW4gaXMgXCIoXCJcbiAgICAgIGxpc3QgPSBuZXcgTGlzdChjb250ZXh0KVxuICAgICAgd2hpbGUgdG9rZW5zWzBdIGlzbnQgXCIpXCJcbiAgICAgICAgQGNvbnRleHQucHVzaChsaXN0LCBAcmVhZEZyb20odG9rZW5zLCBjb250ZXh0KSlcbiAgICAgIHRva2Vucy5zaGlmdCgpXG4gICAgICByZXR1cm4gbGlzdFxuICAgIGVsc2UgaWYgdG9rZW4gaXMgXCIpXCJcbiAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihcInVuZXhwZWN0ZWQgKVwiKVxuICAgIGVsc2VcbiAgICAgIHJldHVybiBuZXcgQXRvbSh0b2tlbiwgY29udGV4dClcbiAgcGFyc2U6IC0+XG4gICAgZXhwID0gQHJlYWRGcm9tKEB0b2tlbml6ZShAc3RyaW5nKSwgQGNvbnRleHQpXG4gICAgQGNvbnRleHQucm9vdF9pZCA9IGV4cC5pZFxuXG5jbGFzcyBTdHJpbmdSZW5kZXJlclxuICBjb25zdHJ1Y3RvcjogKEBjb250ZXh0LCBAcm9vdF9pZCkgLT5cbiAgcmVuZGVyOiAoKSAtPlxuICAgIGV4cCA9IEBjb250ZXh0LmdldChAcm9vdF9pZClcbiAgICBAX3JlbmRlcihleHApXG4gIF9yZW5kZXI6IChleHApIC0+XG4gICAgaWYgZXhwLmlzX2F0b21cbiAgICAgIGV4cC50b19zKClcbiAgICBlbHNlXG4gICAgICBjaGlsZHJlbiA9IEBjb250ZXh0LmNoaWxkcmVuKGV4cClcblxubW9kdWxlLmV4cG9ydHMgPVxuICBFeHByZXNzaW9uOiBFeHByZXNzaW9uXG4gIExpc3Q6IExpc3RcbiAgQXRvbTogQXRvbVxuICBDb250ZXh0OiBDb250ZXh0XG4gIFN0cmluZ1BhcnNlcjogU3RyaW5nUGFyc2VyXG4gIFN0cmluZ1JlbmRlcmVyOiBTdHJpbmdSZW5kZXJlclxuIl19
//# sourceURL=/Users/gvieira/code/hare/hare_framer/src_coffee/hare.coffee