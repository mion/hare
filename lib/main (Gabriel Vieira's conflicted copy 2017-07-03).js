// Generated by CoffeeScript 1.12.6
(function() {
  var Creature, Grid, Movement, Position, _centerize, clusterMaker, foo, grid,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  clusterMaker = require("clusters");

  _centerize = function(overLayer, underLayer) {
    var paddingX, paddingY;
    paddingX = (underLayer.width - overLayer.width) / 2;
    paddingY = (underLayer.height - overLayer.height) / 2;
    overLayer.x = underLayer.x + paddingX;
    return overLayer.y = underLayer.y + paddingY;
  };

  Grid = (function(superClass) {
    extend(Grid, superClass);

    function Grid(sqm) {
      var bgColor, cell, i, j, k, l, m, n, ref, ref1, ref2, ref3;
      this.sqm = sqm;
      Grid.__super__.constructor.call(this, {
        x: 0,
        y: 0,
        width: Canvas.width,
        height: Canvas.height,
        backgroundColor: '#333333'
      });
      this.rows = Math.ceil(this.height / this.sqm);
      this.columns = Math.ceil(this.width / this.sqm);
      this.cells = {};
      for (i = k = 0, ref = this.rows - 1; k <= ref; i = k += 1) {
        this.cells[i] = {};
        for (j = l = 0, ref1 = this.columns - 1; l <= ref1; j = l += 1) {
          this.cells[i][j] = null;
        }
      }
      for (j = m = 0, ref2 = this.columns - 1; m <= ref2; j = m += 1) {
        for (i = n = 0, ref3 = this.rows - 1; n <= ref3; i = n += 1) {
          bgColor = (i + j * (this.columns + 1)) % 2 === 0 ? '#f0f0f0' : '#f6f6f6';
          cell = new Layer({
            x: i * this.sqm,
            y: j * this.sqm,
            width: this.sqm,
            height: this.sqm,
            backgroundColor: bgColor
          });
          this.cells[i][j] = cell;
        }
      }
    }

    Grid.prototype.cellAt = function(pos) {
      return this.cells[pos.i][pos.j];
    };

    Grid.prototype.place = function(thing) {
      this.addChild(thing);
      return _centerize(thing, this.cellAt(thing.pos));
    };

    return Grid;

  })(Layer);

  grid = new Grid(70);

  Position = (function() {
    function Position(i1, j1) {
      this.i = i1;
      this.j = j1;
    }

    return Position;

  })();

  Movement = (function() {
    function Movement(creature, destination) {
      this.creature = creature;
      this.destination = destination;
    }

    Movement.prototype.perform = function() {
      return this.creature.move(this.destination);
    };

    return Movement;

  })();

  Creature = (function(superClass) {
    extend(Creature, superClass);

    function Creature(displayName, pos1) {
      this.displayName = displayName;
      this.pos = pos1;
      this.health = 100;
      this.energy = 100;
      this.hunger = 100;
      this.thirst = 100;
      this.sex = 100;
      this.pleasure = 100;
      Creature.__super__.constructor.call(this, {
        width: 50,
        height: 50,
        backgroundColor: '#0099ff',
        borderRadius: 12
      });
    }

    return Creature;

  })(Layer);

  foo = new Creature("Foo", new Position(1, 2));

}).call(this);
