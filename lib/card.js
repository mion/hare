// Generated by CoffeeScript 1.12.6
(function() {
  var Card,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  exports.Card = Card;

  Card = (function(superClass) {
    extend(Card, superClass);

    Card.prototype.GROW_FACTOR = 1.25;

    Card.prototype.MAX_SIZE = 13;

    Card.prototype.MIN_SIZE = 1;

    Card.prototype.isInside = function(layer) {
      return (this.x > layer.x) && (this.x < layer.x + layer.width) && (this.y > layer.y) && (this.y < layer.y + layer.height);
    };

    function Card(task, delegate) {
      var PADDING, _damping, grow, newHeight, newWidth, stay, text;
      this.task = task;
      this.delegate = delegate;
      if (typeof this.task === 'object') {
        this.xInit = this.task.x;
        this.yInit = this.task.y;
        this.task = this.task.text;
      } else {
        this.xInit = Canvas.width / 2;
        this.yInit = Canvas.height / 2;
      }
      this.pointsEstimate = Card.prototype.MIN_SIZE;
      Card.__super__.constructor.call(this, {
        x: this.xInit,
        y: this.yInit,
        width: 100,
        height: 100,
        borderRadius: 8,
        backgroundColor: "#FFFFCC",
        shadowX: 0,
        shadowY: 3,
        shadowBlur: 6,
        shadowSpread: 0,
        shadowColor: "rgba(0,0,0,0.25)"
      });
      text = new TextLayer({
        parent: this,
        text: this.task,
        fontSize: 12,
        fontFamily: "Inconsolata-g",
        color: "black"
      });
      this.text = text;
      PADDING = 15;
      this.width = text.width + (2 * PADDING);
      this.height = text.height + (2 * PADDING);
      text.x = Align.center;
      text.y = Align.center;
      newWidth = this.width * 1.25;
      newHeight = this.height * 1.25;
      _damping = 0.19;
      grow = new Animation(this, {
        width: newWidth,
        height: newHeight,
        x: this.xInit,
        y: this.yInit,
        options: {
          curve: Spring({
            damping: _damping
          }),
          time: 0.5
        }
      });
      grow.start();
      stay = new Animation(text, {
        x: (newWidth / 2) - (text.width / 2),
        y: (newHeight / 2) - (text.height / 2),
        options: {
          curve: Spring({
            damping: _damping
          }),
          time: 0.5
        }
      });
      stay.start();
      this.draggable.enabled = true;
      this.draggable.momentum = false;
    }

    Card.prototype.toObject = function() {
      return {
        text: this.task,
        x: this.x,
        y: this.y
      };
    };

    Card.prototype.grow = function() {
      var newHeight, newWidth;
      if (this.pointsEstimate === Card.prototype.MAX_SIZE) {
        return this.pointsEstimate;
      }
      newWidth = this.width * Card.prototype.GROW_FACTOR;
      newHeight = this.height * Card.prototype.GROW_FACTOR;
      this.animate({
        width: newWidth,
        height: newHeight
      });
      this.text.animate({
        x: (newWidth / 2) - (this.text.width / 2),
        y: (newHeight / 2) - (this.text.height / 2)
      });
      if (this.pointsEstimate === 1) {
        this.pointsEstimate = 2;
      } else if (this.pointsEstimate === 2) {
        this.pointsEstimate = 3;
      } else if (this.pointsEstimate === 3) {
        this.pointsEstimate = 5;
      } else if (this.pointsEstimate === 5) {
        this.pointsEstimate = 8;
      } else if (this.pointsEstimate === 8) {
        this.pointsEstimate = this.MAX_SIZE;
      }
      return this.pointsEstimate;
    };

    Card.prototype.shrink = function() {
      var newHeight, newWidth;
      if (this.pointsEstimate === Card.prototype.MIN_SIZE) {
        return this.pointsEstimate;
      }
      newWidth = this.width * (1 / Card.prototype.GROW_FACTOR);
      newHeight = this.height * (1 / Card.prototype.GROW_FACTOR);
      this.animate({
        width: newWidth,
        height: newHeight
      });
      this.text.animate({
        x: (newWidth / 2) - (this.text.width / 2),
        y: (newHeight / 2) - (this.text.height / 2)
      });
      if (this.pointsEstimate === 2) {
        this.pointsEstimate = this.MIN_SIZE;
      } else if (this.pointsEstimate === 3) {
        this.pointsEstimate = 2;
      } else if (this.pointsEstimate === 5) {
        this.pointsEstimate = 3;
      } else if (this.pointsEstimate === 8) {
        this.pointsEstimate = 5;
      } else if (this.pointsEstimate === 13) {
        this.pointsEstimate = 8;
      }
      return this.pointsEstimate;
    };

    return Card;

  })(Layer);

}).call(this);
