// Generated by CoffeeScript 1.12.6
(function() {
  var Cell, Creature, Grid, Movement, Position, Simulation, _centerize, _centerizedPoint, clusterMaker, simulation,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  clusterMaker = require("clusters");

  _centerize = function(overLayer, underLayer) {
    var paddingX, paddingY;
    paddingX = (underLayer.width - overLayer.width) / 2;
    paddingY = (underLayer.height - overLayer.height) / 2;
    overLayer.x = underLayer.x + paddingX;
    return overLayer.y = underLayer.y + paddingY;
  };

  _centerizedPoint = function(overLayer, underLayer) {
    var paddingX, paddingY;
    paddingX = (underLayer.width - overLayer.width) / 2;
    paddingY = (underLayer.height - overLayer.height) / 2;
    return {
      x: underLayer.x + paddingX,
      y: underLayer.y + paddingY
    };
  };

  Cell = (function(superClass) {
    extend(Cell, superClass);

    function Cell(parent, sqm, i, j, backgroundColor) {
      Cell.__super__.constructor.call(this, {
        parent: parent,
        x: i * sqm,
        y: i * sqm,
        width: sqm,
        height: sqm,
        backgroundColor: backgroundColor
      });
    }

    return Cell;

  })(Layer);

  Grid = (function(superClass) {
    extend(Grid, superClass);

    function Grid(sqm1) {
      var bgColor, cell, i, j, k, l, m, n, ref, ref1, ref2, ref3;
      this.sqm = sqm1;
      Grid.__super__.constructor.call(this, {
        x: 0,
        y: 0,
        width: Canvas.width,
        height: Canvas.height,
        backgroundColor: '#333333'
      });
      this.rows = Math.ceil(this.height / this.sqm);
      this.columns = Math.ceil(this.width / this.sqm);
      this.cells = {};
      for (i = k = 0, ref = this.rows - 1; k <= ref; i = k += 1) {
        this.cells[i] = {};
        for (j = l = 0, ref1 = this.columns - 1; l <= ref1; j = l += 1) {
          this.cells[i][j] = null;
        }
      }
      for (j = m = 0, ref2 = this.columns - 1; m <= ref2; j = m += 1) {
        for (i = n = 0, ref3 = this.rows - 1; n <= ref3; i = n += 1) {
          bgColor = (i + j * this.columns) % 2 === 0 ? '#f0f0f0' : '#f6f6f6';
          cell = new Layer({
            parent: this,
            x: i * this.sqm,
            y: j * this.sqm,
            width: this.sqm,
            height: this.sqm,
            backgroundColor: bgColor
          });
          this.cells[i][j] = cell;
        }
      }
    }

    Grid.prototype.cellAt = function(pos) {
      return this.cells[pos.i][pos.j];
    };

    Grid.prototype.isWithinBounds = function(pos) {
      return (0 <= pos.i) && (pos.i <= (this.rows - 1)) && (0 <= pos.j) && (pos.j <= (this.columns - 1));
    };

    Grid.prototype.place = function(thing) {
      this.addChild(thing);
      return _centerize(thing, this.cellAt(thing.pos));
    };

    return Grid;

  })(Layer);

  Position = (function() {
    function Position(i1, j1) {
      this.i = i1;
      this.j = j1;
    }

    Position.prototype.next = function(direction) {
      if (direction === "up") {
        return new Position(this.i, this.j - 1);
      } else if (direction === "down") {
        return new Position(this.i, this.j + 1);
      } else if (direction === "left") {
        return new Position(this.i - 1, this.j);
      } else if (direction === "right") {
        return new Position(this.i + 1, this.j);
      } else {
        return null;
      }
    };

    return Position;

  })();

  Movement = (function() {
    function Movement(grid, creature, targetPos) {
      this.grid = grid;
      this.creature = creature;
      this.targetPos = targetPos;
    }

    Movement.prototype.isValid = function() {
      return this.grid.isWithinBounds(this.targetPos);
    };

    Movement.prototype.perform = function() {
      var anim;
      if (this.creature.isAnimating) {
        return false;
      }
      if (!this.isValid()) {
        return false;
      }
      anim = new Animation(this.creature, {
        point: _centerizedPoint(this.creature, this.grid.cellAt(this.targetPos))
      });
      anim.start();
      anim.on(Events.AnimationEnd, (function(_this) {
        return function() {
          return _this.creature.pos = new Position(_this.targetPos.i, _this.targetPos.j);
        };
      })(this));
      return true;
    };

    return Movement;

  })();

  Creature = (function(superClass) {
    extend(Creature, superClass);

    function Creature(displayName, pos1) {
      this.displayName = displayName;
      this.pos = pos1;
      this.health = 100;
      this.energy = 100;
      this.hunger = 100;
      this.thirst = 100;
      this.sex = 100;
      this.pleasure = 100;
      Creature.__super__.constructor.call(this, {
        name: 'creature_' + this.displayName.toLowerCase().split(' ').join('_'),
        width: 50,
        height: 50,
        backgroundColor: '#0099ff',
        borderRadius: 12
      });
    }

    return Creature;

  })(Layer);

  Simulation = (function() {
    function Simulation() {
      this.grid = new Grid(70);
    }

    Simulation.prototype.update = function() {
      var action, dir;
      console.log('[*] Updating');
      dir = Utils.randomChoice(["up", "down", "left", "right"]);
      action = new Movement(this.grid, this.foo, this.foo.pos.next(dir));
      return action.perform();
    };

    Simulation.prototype.start = function() {
      this.foo = new Creature("Foo", new Position(1, 2));
      return this.grid.place(this.foo);
    };

    return Simulation;

  })();

  simulation = new Simulation;

  simulation.start();

  Utils.interval(1, function() {
    return simulation.update();
  });

}).call(this);
