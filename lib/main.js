// Generated by CoffeeScript 1.12.6
(function() {
  var Cell, Creature, Grid, Movement, Position, Simulation, __, clusterMaker, simulation,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  __ = require('./utils');

  clusterMaker = require("clusters");

  Position = require('./position');

  Movement = require('./movement');

  Cell = (function(superClass) {
    extend(Cell, superClass);

    function Cell(parent, sqm, i, j, backgroundColor) {
      Cell.__super__.constructor.call(this, {
        parent: parent,
        x: i * sqm,
        y: i * sqm,
        width: sqm,
        height: sqm,
        backgroundColor: backgroundColor
      });
    }

    return Cell;

  })(Layer);

  Grid = (function(superClass) {
    extend(Grid, superClass);

    function Grid(sqm1) {
      var bgColor, cell, counter, i, j, k, l, ref, ref1;
      this.sqm = sqm1;
      Grid.__super__.constructor.call(this, {
        x: 0,
        y: 0,
        width: Canvas.width,
        height: Canvas.height,
        backgroundColor: '#333333'
      });
      this.rows = Math.ceil(this.height / this.sqm);
      this.columns = Math.ceil(this.width / this.sqm);
      this.cells = {};
      counter = 0;
      this.creatures = [];
      for (i = k = 0, ref = this.rows - 1; k <= ref; i = k += 1) {
        this.cells[i] = {};
        for (j = l = 0, ref1 = this.columns - 1; l <= ref1; j = l += 1) {
          this.cells[i][j] = null;
          bgColor = counter % 2 === 0 ? '#f0f0f0' : '#f6f6f6';
          counter += 1;
          cell = new Layer({
            parent: this,
            x: i * this.sqm,
            y: j * this.sqm,
            width: this.sqm,
            height: this.sqm,
            backgroundColor: bgColor
          });
          this.cells[i][j] = cell;
        }
      }
    }

    Grid.prototype.cellAt = function(pos) {
      return this.cells[pos.i][pos.j];
    };

    Grid.prototype.isWithinBounds = function(pos) {
      return (0 <= pos.i) && (pos.i <= (this.rows - 1)) && (0 <= pos.j) && (pos.j <= (this.columns - 1));
    };

    Grid.prototype.addCreature = function(creature) {
      this.creatures.push(creature);
      this.addChild(creature);
      return __.centerize(creature, this.cellAt(creature.pos));
    };

    Grid.prototype.isWalkable = function(pos) {
      return !_.some(this.creatures, function(creature) {
        return creature.pos.isEqual(pos);
      });
    };

    return Grid;

  })(Layer);

  Creature = (function(superClass) {
    extend(Creature, superClass);

    function Creature(displayName, pos1) {
      var healthBarLayer, nameTextLayer;
      this.displayName = displayName;
      this.pos = pos1;
      this.health = 100;
      this.energy = 100;
      this.hunger = 100;
      this.thirst = 100;
      this.sex = 100;
      this.pleasure = 100;
      Creature.__super__.constructor.call(this, {
        name: 'creature_' + this.displayName.toLowerCase().split(' ').join('_'),
        width: 50,
        height: 50,
        backgroundColor: '#0099ff',
        borderRadius: 12
      });
      nameTextLayer = new TextLayer({
        text: this.displayName,
        fontSize: 15,
        fontFamily: 'Arial',
        textAlign: 'center',
        x: this.x,
        y: this.y,
        width: this.width,
        color: '#000000'
      });
      this.addChild(nameTextLayer);
      healthBarLayer = new Layer({
        x: this.x,
        y: this.y,
        width: this.width,
        height: 5,
        backgroundColor: '#00ff00',
        borderWidth: 1,
        borderColor: '#000000'
      });
      this.addChild(healthBarLayer);
      __.above(healthBarLayer, this, 10);
      __.above(nameTextLayer, healthBarLayer, 20);
    }

    return Creature;

  })(Layer);

  Simulation = (function() {
    function Simulation() {
      this.grid = new Grid(70);
    }

    Simulation.prototype.start = function() {
      this.foo = new Creature("Foo", new Position(1, 2));
      this.grid.addCreature(this.foo);
      this.bar = new Creature("Bar", new Position(2, 2));
      this.grid.addCreature(this.bar);
      this.quux = new Creature("Quux", new Position(0, 2));
      return this.grid.addCreature(this.quux);
    };

    Simulation.prototype.update = function() {
      var action, dir;
      console.log('[*] Updating');
      dir = Utils.randomChoice(["up", "down", "left", "right"]);
      action = new Movement(this.grid, this.foo, this.foo.pos.next(dir));
      return action.perform();
    };

    return Simulation;

  })();

  simulation = new Simulation;

  simulation.start();

  Utils.interval(1, function() {
    return simulation.update();
  });

}).call(this);
