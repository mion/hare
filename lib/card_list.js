// Generated by CoffeeScript 1.12.6
(function() {
  var Card, CardList;

  Card = require('./card');

  exports.CardList = CardList;

  CardList = (function() {
    function CardList() {
      this.cards = [];
    }

    CardList.prototype.save = function() {
      var card_objects, json_string;
      console.log("saving " + this.cards.length + " cards...");
      card_objects = _.map(this.cards, function(card) {
        return card.toObject();
      });
      json_string = JSON.stringify(card_objects);
      return localStorage.setItem('card_objects', json_string);
    };

    CardList.prototype.restore = function() {
      var card_objects, restored_cards;
      if (_.isNil(localStorage.getItem('card_objects'))) {
        return false;
      }
      card_objects = JSON.parse(localStorage.getItem('card_objects'));
      console.log("restoring " + card_objects.length + " cards...");
      restored_cards = _.map(card_objects, (function(_this) {
        return function(obj) {
          return new Card(obj, _this);
        };
      })(this));
      return _.forEach(restored_cards, (function(_this) {
        return function(card) {
          return _this.addCard(card);
        };
      })(this));
    };

    CardList.prototype.add = function(task) {
      var card;
      card = new Card(task, this);
      return this.addCard(card);
    };

    CardList.prototype.addCard = function(card) {
      this.cards.push(card);
      card.onDoubleTap((function(_this) {
        return function() {
          return card.grow();
        };
      })(this));
      card.onLongPress((function(_this) {
        return function() {
          if (!card.draggable.isDragging) {
            return card.shrink();
          }
        };
      })(this));
      card.onDragEnd((function(_this) {
        return function() {
          return _this.save();
        };
      })(this));
      return card;
    };

    CardList.prototype.remove = function(card) {
      var pos;
      pos = this.cards.indexOf(card);
      this.cards.splice(pos, 1);
      return card.destroy();
    };

    CardList.prototype.cardAt = function(x, y) {
      var card, i, len, ref;
      ref = this.cards;
      for (i = 0, len = ref.length; i < len; i++) {
        card = ref[i];
        if (card.x === x && card.y === y) {
          return card;
        }
      }
      return null;
    };

    CardList.prototype.cluster = function() {
      var bigCard, c, cardsInside, cluster, clusters, i, j, len, len1, pair, points, ref, results, tasks;
      points = this.cards.map(function(card) {
        return [card.x, card.y];
      });
      clusterMaker.data(points);
      clusters = clusterMaker.clusters();
      console.log("clusters", clusters);
      results = [];
      for (i = 0, len = clusters.length; i < len; i++) {
        cluster = clusters[i];
        cardsInside = [];
        ref = cluster.points;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          pair = ref[j];
          c = this.cardAt(pair[0], pair[1]);
          if (!_.isNil(c)) {
            cardsInside.push(c);
          }
        }
        tasks = cardsInside.map(function(card) {
          return card.task;
        });
        bigCard = this.add(tasks.join("; "));
        bigCard.x = cluster.centroid[0];
        bigCard.y = cluster.centroid[1];
        results.push(cardsInside.forEach((function(_this) {
          return function(card) {
            return _this.remove(card);
          };
        })(this)));
      }
      return results;
    };

    return CardList;

  })();

}).call(this);
